
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f94  08003f94  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f9c  08003f9c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000024  08003fc8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003fc8  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbe4  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dbb  00000000  00000000  0002bc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d1  00000000  00000000  0002e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016efc  00000000  00000000  0002e9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b280  00000000  00000000  000458d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092cec  00000000  00000000  00050b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e94  00000000  00000000  000e3844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e56d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000024 	.word	0x20000024
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003ef4 	.word	0x08003ef4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000028 	.word	0x20000028
 8000100:	08003ef4 	.word	0x08003ef4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa84 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f812 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8c4 	bl	80007b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800062c:	f000 f8a4 	bl	8000778 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f854 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, &buff, 1);
 8000634:	4903      	ldr	r1, [pc, #12]	; (8000644 <main+0x28>)
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <main+0x2c>)
 8000638:	2201      	movs	r2, #1
 800063a:	0018      	movs	r0, r3
 800063c:	f002 f83c 	bl	80026b8 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x24>
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	20000014 	.word	0x20000014
 8000648:	20000040 	.word	0x20000040

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b093      	sub	sp, #76	; 0x4c
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	2410      	movs	r4, #16
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	2338      	movs	r3, #56	; 0x38
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f003 fc1d 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	2310      	movs	r3, #16
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f003 fc16 	bl	8003e9c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	0018      	movs	r0, r3
 8000676:	f001 f85d 	bl	8001734 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2202      	movs	r2, #2
 800067e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0018      	movs	r0, r3
 800069e:	f001 f895 	bl	80017cc <HAL_RCC_OscConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006a6:	f000 f8ed 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	003b      	movs	r3, r7
 80006ac:	2207      	movs	r2, #7
 80006ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c2:	003b      	movs	r3, r7
 80006c4:	2100      	movs	r1, #0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fb9a 	bl	8001e00 <HAL_RCC_ClockConfig>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006d0:	f000 f8d8 	bl	8000884 <Error_Handler>
  }
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b013      	add	sp, #76	; 0x4c
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_USART2_UART_Init+0x94>)
 80006e2:	4a24      	ldr	r2, [pc, #144]	; (8000774 <MX_USART2_UART_Init+0x98>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_USART2_UART_Init+0x94>)
 80006e8:	22e1      	movs	r2, #225	; 0xe1
 80006ea:	0252      	lsls	r2, r2, #9
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_USART2_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_USART2_UART_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_USART2_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_USART2_UART_Init+0x94>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_USART2_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_USART2_UART_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_USART2_UART_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_USART2_UART_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART2_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x94>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fecc 	bl	80024c4 <HAL_UART_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 f8a8 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x94>)
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f003 facf 	bl	8003cdc <HAL_UARTEx_SetTxFifoThreshold>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000742:	f000 f89f 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_USART2_UART_Init+0x94>)
 8000748:	2100      	movs	r1, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f003 fb06 	bl	8003d5c <HAL_UARTEx_SetRxFifoThreshold>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 f896 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x94>)
 800075a:	0018      	movs	r0, r3
 800075c:	f003 fa84 	bl	8003c68 <HAL_UARTEx_DisableFifoMode>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000764:	f000 f88e 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	20000040 	.word	0x20000040
 8000774:	40004400 	.word	0x40004400

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_DMA_Init+0x38>)
 8000780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_DMA_Init+0x38>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	639a      	str	r2, [r3, #56]	; 0x38
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_DMA_Init+0x38>)
 800078c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200b      	movs	r0, #11
 800079c:	f000 faf8 	bl	8000d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 80007a0:	200b      	movs	r0, #11
 80007a2:	f000 fb0a 	bl	8000dba <HAL_NVIC_EnableIRQ>

}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b002      	add	sp, #8
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	40021000 	.word	0x40021000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	0018      	movs	r0, r3
 80007be:	2314      	movs	r3, #20
 80007c0:	001a      	movs	r2, r3
 80007c2:	2100      	movs	r1, #0
 80007c4:	f003 fb6a 	bl	8003e9c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_GPIO_Init+0x68>)
 80007ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_GPIO_Init+0x68>)
 80007ce:	2101      	movs	r1, #1
 80007d0:	430a      	orrs	r2, r1
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_GPIO_Init+0x68>)
 80007d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d8:	2201      	movs	r2, #1
 80007da:	4013      	ands	r3, r2
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007e0:	23a0      	movs	r3, #160	; 0xa0
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 ff85 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2220      	movs	r2, #32
 80007f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2201      	movs	r2, #1
 80007f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	1d3a      	adds	r2, r7, #4
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	0011      	movs	r1, r2
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fe0e 	bl	8001430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b006      	add	sp, #24
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  if(huart->Instance == USART2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a11      	ldr	r2, [pc, #68]	; (8000874 <HAL_UART_RxCpltCallback+0x54>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d11c      	bne.n	800086c <HAL_UART_RxCpltCallback+0x4c>
  {
	  if((uint8_t)buff[0] == (uint8_t)'1')
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_UART_RxCpltCallback+0x58>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b31      	cmp	r3, #49	; 0x31
 8000838:	d107      	bne.n	800084a <HAL_UART_RxCpltCallback+0x2a>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2201      	movs	r2, #1
 8000840:	2120      	movs	r1, #32
 8000842:	0018      	movs	r0, r3
 8000844:	f000 ff58 	bl	80016f8 <HAL_GPIO_WritePin>
 8000848:	e00a      	b.n	8000860 <HAL_UART_RxCpltCallback+0x40>
	  }
	  else if((uint8_t)buff[0] == (uint8_t)'0')
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_UART_RxCpltCallback+0x58>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b30      	cmp	r3, #48	; 0x30
 8000850:	d106      	bne.n	8000860 <HAL_UART_RxCpltCallback+0x40>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2200      	movs	r2, #0
 8000858:	2120      	movs	r1, #32
 800085a:	0018      	movs	r0, r3
 800085c:	f000 ff4c 	bl	80016f8 <HAL_GPIO_WritePin>
	  }
	  HAL_UART_Transmit(&huart2, (uint8_t*)command, sizeof(command)/sizeof(char), 10);
 8000860:	4906      	ldr	r1, [pc, #24]	; (800087c <HAL_UART_RxCpltCallback+0x5c>)
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <HAL_UART_RxCpltCallback+0x60>)
 8000864:	230a      	movs	r3, #10
 8000866:	2213      	movs	r2, #19
 8000868:	f001 fe82 	bl	8002570 <HAL_UART_Transmit>

  }
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	20000014 	.word	0x20000014
 800087c:	20000000 	.word	0x20000000
 8000880:	20000040 	.word	0x20000040

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x44>)
 8000898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_MspInit+0x44>)
 800089c:	2101      	movs	r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	641a      	str	r2, [r3, #64]	; 0x40
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x44>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	2201      	movs	r2, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x44>)
 80008b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_MspInit+0x44>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0549      	lsls	r1, r1, #21
 80008b8:	430a      	orrs	r2, r1
 80008ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_MspInit+0x44>)
 80008be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	055b      	lsls	r3, r3, #21
 80008c4:	4013      	ands	r3, r2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b097      	sub	sp, #92	; 0x5c
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	2344      	movs	r3, #68	; 0x44
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	0018      	movs	r0, r3
 80008e6:	2314      	movs	r3, #20
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f003 fad6 	bl	8003e9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	2410      	movs	r4, #16
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	0018      	movs	r0, r3
 80008f6:	2334      	movs	r3, #52	; 0x34
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f003 face 	bl	8003e9c <memset>
  if(huart->Instance==USART2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a50      	ldr	r2, [pc, #320]	; (8000a48 <HAL_UART_MspInit+0x170>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d000      	beq.n	800090c <HAL_UART_MspInit+0x34>
 800090a:	e099      	b.n	8000a40 <HAL_UART_MspInit+0x168>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2202      	movs	r2, #2
 8000910:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000918:	193b      	adds	r3, r7, r4
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fc1a 	bl	8002154 <HAL_RCCEx_PeriphCLKConfig>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000924:	f7ff ffae 	bl	8000884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000928:	4b48      	ldr	r3, [pc, #288]	; (8000a4c <HAL_UART_MspInit+0x174>)
 800092a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800092c:	4b47      	ldr	r3, [pc, #284]	; (8000a4c <HAL_UART_MspInit+0x174>)
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	0289      	lsls	r1, r1, #10
 8000932:	430a      	orrs	r2, r1
 8000934:	63da      	str	r2, [r3, #60]	; 0x3c
 8000936:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <HAL_UART_MspInit+0x174>)
 8000938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	029b      	lsls	r3, r3, #10
 800093e:	4013      	ands	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <HAL_UART_MspInit+0x174>)
 8000946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <HAL_UART_MspInit+0x174>)
 800094a:	2101      	movs	r1, #1
 800094c:	430a      	orrs	r2, r1
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
 8000950:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_MspInit+0x174>)
 8000952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000954:	2201      	movs	r2, #1
 8000956:	4013      	ands	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800095c:	2144      	movs	r1, #68	; 0x44
 800095e:	187b      	adds	r3, r7, r1
 8000960:	220c      	movs	r2, #12
 8000962:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2202      	movs	r2, #2
 8000968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2201      	movs	r2, #1
 800097a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	187a      	adds	r2, r7, r1
 800097e:	23a0      	movs	r3, #160	; 0xa0
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	0011      	movs	r1, r2
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fd53 	bl	8001430 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <HAL_UART_MspInit+0x178>)
 800098c:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <HAL_UART_MspInit+0x17c>)
 800098e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000990:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <HAL_UART_MspInit+0x178>)
 8000992:	2234      	movs	r2, #52	; 0x34
 8000994:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <HAL_UART_MspInit+0x178>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <HAL_UART_MspInit+0x178>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <HAL_UART_MspInit+0x178>)
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <HAL_UART_MspInit+0x178>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ae:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <HAL_UART_MspInit+0x178>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80009b4:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <HAL_UART_MspInit+0x178>)
 80009b6:	2220      	movs	r2, #32
 80009b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ba:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <HAL_UART_MspInit+0x178>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <HAL_UART_MspInit+0x178>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fa16 	bl	8000df4 <HAL_DMA_Init>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80009cc:	f7ff ff5a 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <HAL_UART_MspInit+0x178>)
 80009d6:	505a      	str	r2, [r3, r1]
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <HAL_UART_MspInit+0x178>)
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <HAL_UART_MspInit+0x180>)
 80009e0:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <HAL_UART_MspInit+0x184>)
 80009e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <HAL_UART_MspInit+0x180>)
 80009e6:	2235      	movs	r2, #53	; 0x35
 80009e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_UART_MspInit+0x180>)
 80009ec:	2210      	movs	r2, #16
 80009ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_UART_MspInit+0x180>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_UART_MspInit+0x180>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_UART_MspInit+0x180>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_UART_MspInit+0x180>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <HAL_UART_MspInit+0x180>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_UART_MspInit+0x180>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_UART_MspInit+0x180>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f9ec 	bl	8000df4 <HAL_DMA_Init>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8000a20:	f7ff ff30 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <HAL_UART_MspInit+0x180>)
 8000a28:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_UART_MspInit+0x180>)
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	201c      	movs	r0, #28
 8000a36:	f000 f9ab 	bl	8000d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a3a:	201c      	movs	r0, #28
 8000a3c:	f000 f9bd 	bl	8000dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b017      	add	sp, #92	; 0x5c
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	40004400 	.word	0x40004400
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	200000d4 	.word	0x200000d4
 8000a54:	4002006c 	.word	0x4002006c
 8000a58:	20000130 	.word	0x20000130
 8000a5c:	40020080 	.word	0x40020080

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f000 f8bc 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x1c>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fb88 	bl	80011ac <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x20>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fb84 	bl	80011ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	200000d4 	.word	0x200000d4
 8000ab0:	20000130 	.word	0x20000130

08000ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <USART2_IRQHandler+0x14>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 fe5a 	bl	8002774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000040 	.word	0x20000040

08000acc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000adc:	f7ff fff6 	bl	8000acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b06:	f003 f9d1 	bl	8003eac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b0a:	f7ff fd87 	bl	800061c <main>

08000b0e <LoopForever>:

LoopForever:
  b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   r0, =_estack
 8000b10:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000b1c:	08003fa4 	.word	0x08003fa4
  ldr r2, =_sbss
 8000b20:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000b24:	20000190 	.word	0x20000190

08000b28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_COMP_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_Init+0x3c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Init+0x3c>)
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	0049      	lsls	r1, r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b46:	2003      	movs	r0, #3
 8000b48:	f000 f810 	bl	8000b6c <HAL_InitTick>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e001      	b.n	8000b5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fe9a 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	230f      	movs	r3, #15
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_InitTick+0x88>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d02b      	beq.n	8000bdc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0x8c>)
 8000b86:	681c      	ldr	r4, [r3, #0]
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <HAL_InitTick+0x88>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	23fa      	movs	r3, #250	; 0xfa
 8000b90:	0098      	lsls	r0, r3, #2
 8000b92:	f7ff fab7 	bl	8000104 <__udivsi3>
 8000b96:	0003      	movs	r3, r0
 8000b98:	0019      	movs	r1, r3
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	f7ff fab2 	bl	8000104 <__udivsi3>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 f919 	bl	8000dda <HAL_SYSTICK_Config>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d112      	bne.n	8000bd2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d80a      	bhi.n	8000bc8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 f8e8 	bl	8000d90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_InitTick+0x90>)
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e00d      	b.n	8000be4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bc8:	230f      	movs	r3, #15
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	e008      	b.n	8000be4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
 8000bda:	e003      	b.n	8000be4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000be4:	230f      	movs	r3, #15
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	781b      	ldrb	r3, [r3, #0]
}
 8000bea:	0018      	movs	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b005      	add	sp, #20
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	20000020 	.word	0x20000020
 8000bf8:	20000018 	.word	0x20000018
 8000bfc:	2000001c 	.word	0x2000001c

08000c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x1c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	001a      	movs	r2, r3
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_IncTick+0x20>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	18d2      	adds	r2, r2, r3
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_IncTick+0x20>)
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	20000020 	.word	0x20000020
 8000c20:	2000018c 	.word	0x2000018c

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <HAL_GetTick+0x10>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	2000018c 	.word	0x2000018c

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	0002      	movs	r2, r0
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b7f      	cmp	r3, #127	; 0x7f
 8000c4a:	d809      	bhi.n	8000c60 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	001a      	movs	r2, r3
 8000c52:	231f      	movs	r3, #31
 8000c54:	401a      	ands	r2, r3
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_EnableIRQ+0x30>)
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	000a      	movs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	0002      	movs	r2, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c80:	d828      	bhi.n	8000cd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c82:	4a2f      	ldr	r2, [pc, #188]	; (8000d40 <__NVIC_SetPriority+0xd4>)
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	33c0      	adds	r3, #192	; 0xc0
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	589b      	ldr	r3, [r3, r2]
 8000c92:	1dfa      	adds	r2, r7, #7
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	0011      	movs	r1, r2
 8000c98:	2203      	movs	r2, #3
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	00d2      	lsls	r2, r2, #3
 8000c9e:	21ff      	movs	r1, #255	; 0xff
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2303      	movs	r3, #3
 8000cba:	4003      	ands	r3, r0
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	481f      	ldr	r0, [pc, #124]	; (8000d40 <__NVIC_SetPriority+0xd4>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	33c0      	adds	r3, #192	; 0xc0
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cd2:	e031      	b.n	8000d38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <__NVIC_SetPriority+0xd8>)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	0019      	movs	r1, r3
 8000cdc:	230f      	movs	r3, #15
 8000cde:	400b      	ands	r3, r1
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3306      	adds	r3, #6
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	18d3      	adds	r3, r2, r3
 8000cea:	3304      	adds	r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	1dfa      	adds	r2, r7, #7
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	00d2      	lsls	r2, r2, #3
 8000cfa:	21ff      	movs	r1, #255	; 0xff
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	401a      	ands	r2, r3
 8000d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	2303      	movs	r3, #3
 8000d16:	4003      	ands	r3, r0
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <__NVIC_SetPriority+0xd8>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	001c      	movs	r4, r3
 8000d24:	230f      	movs	r3, #15
 8000d26:	4023      	ands	r3, r4
 8000d28:	3b08      	subs	r3, #8
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	3306      	adds	r3, #6
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	18c3      	adds	r3, r0, r3
 8000d34:	3304      	adds	r3, #4
 8000d36:	601a      	str	r2, [r3, #0]
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	045b      	lsls	r3, r3, #17
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d301      	bcc.n	8000d60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e010      	b.n	8000d82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <SysTick_Config+0x44>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	3a01      	subs	r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d68:	2301      	movs	r3, #1
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff ff7c 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x44>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x44>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	1c02      	adds	r2, r0, #0
 8000da0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b004      	add	sp, #16
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff ff33 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ffaf 	bl	8000d48 <SysTick_Config>
 8000dea:	0003      	movs	r3, r0
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b002      	add	sp, #8
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e077      	b.n	8000ef6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a3d      	ldr	r2, [pc, #244]	; (8000f00 <HAL_DMA_Init+0x10c>)
 8000e0c:	4694      	mov	ip, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	2114      	movs	r1, #20
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff f976 	bl	8000104 <__udivsi3>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	009a      	lsls	r2, r3, #2
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2225      	movs	r2, #37	; 0x25
 8000e24:	2102      	movs	r1, #2
 8000e26:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4934      	ldr	r1, [pc, #208]	; (8000f04 <HAL_DMA_Init+0x110>)
 8000e34:	400a      	ands	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6819      	ldr	r1, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 fa8d 	bl	8001390 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	01db      	lsls	r3, r3, #7
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d102      	bne.n	8000e88 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e90:	213f      	movs	r1, #63	; 0x3f
 8000e92:	400a      	ands	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e9e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d011      	beq.n	8000ecc <HAL_DMA_Init+0xd8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d80d      	bhi.n	8000ecc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 fa98 	bl	80013e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	e008      	b.n	8000ede <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2225      	movs	r2, #37	; 0x25
 8000ee8:	2101      	movs	r1, #1
 8000eea:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2224      	movs	r2, #36	; 0x24
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	bffdfff8 	.word	0xbffdfff8
 8000f04:	ffff800f 	.word	0xffff800f

08000f08 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f16:	2317      	movs	r3, #23
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2224      	movs	r2, #36	; 0x24
 8000f22:	5c9b      	ldrb	r3, [r3, r2]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <HAL_DMA_Start_IT+0x24>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e06f      	b.n	800100c <HAL_DMA_Start_IT+0x104>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2224      	movs	r2, #36	; 0x24
 8000f30:	2101      	movs	r1, #1
 8000f32:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2225      	movs	r2, #37	; 0x25
 8000f38:	5c9b      	ldrb	r3, [r3, r2]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d157      	bne.n	8000ff0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2225      	movs	r2, #37	; 0x25
 8000f44:	2102      	movs	r1, #2
 8000f46:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	438a      	bics	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 f9d3 	bl	8001310 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	210e      	movs	r1, #14
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e00f      	b.n	8000fa4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2104      	movs	r1, #4
 8000f90:	438a      	bics	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	210a      	movs	r1, #10
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	025b      	lsls	r3, r3, #9
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d008      	beq.n	8000fc4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0049      	lsls	r1, r1, #1
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d008      	beq.n	8000fde <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0049      	lsls	r1, r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	430a      	orrs	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e00a      	b.n	8001006 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2224      	movs	r2, #36	; 0x24
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000ffe:	2317      	movs	r3, #23
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001006:	2317      	movs	r3, #23
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	781b      	ldrb	r3, [r3, #0]
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	b006      	add	sp, #24
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e050      	b.n	80010c8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2225      	movs	r2, #37	; 0x25
 800102a:	5c9b      	ldrb	r3, [r3, r2]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d008      	beq.n	8001044 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2204      	movs	r2, #4
 8001036:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	2100      	movs	r1, #0
 800103e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e041      	b.n	80010c8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	210e      	movs	r1, #14
 8001050:	438a      	bics	r2, r1
 8001052:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	491c      	ldr	r1, [pc, #112]	; (80010d0 <HAL_DMA_Abort+0xbc>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2101      	movs	r1, #1
 8001070:	438a      	bics	r2, r1
 8001072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_DMA_Abort+0xc0>)
 8001076:	6859      	ldr	r1, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	221c      	movs	r2, #28
 800107e:	4013      	ands	r3, r2
 8001080:	2201      	movs	r2, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_DMA_Abort+0xc0>)
 8001086:	430a      	orrs	r2, r1
 8001088:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001092:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00c      	beq.n	80010b6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010a6:	490a      	ldr	r1, [pc, #40]	; (80010d0 <HAL_DMA_Abort+0xbc>)
 80010a8:	400a      	ands	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80010b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2225      	movs	r2, #37	; 0x25
 80010ba:	2101      	movs	r1, #1
 80010bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2224      	movs	r2, #36	; 0x24
 80010c2:	2100      	movs	r1, #0
 80010c4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	fffffeff 	.word	0xfffffeff
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e0:	210f      	movs	r1, #15
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2225      	movs	r2, #37	; 0x25
 80010ec:	5c9b      	ldrb	r3, [r3, r2]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d006      	beq.n	8001102 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2204      	movs	r2, #4
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e049      	b.n	8001196 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	210e      	movs	r1, #14
 800110e:	438a      	bics	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	438a      	bics	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	491d      	ldr	r1, [pc, #116]	; (80011a4 <HAL_DMA_Abort_IT+0xcc>)
 800112e:	400a      	ands	r2, r1
 8001130:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_DMA_Abort_IT+0xd0>)
 8001134:	6859      	ldr	r1, [r3, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	221c      	movs	r2, #28
 800113c:	4013      	ands	r3, r2
 800113e:	2201      	movs	r2, #1
 8001140:	409a      	lsls	r2, r3
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_DMA_Abort_IT+0xd0>)
 8001144:	430a      	orrs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001150:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00c      	beq.n	8001174 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001164:	490f      	ldr	r1, [pc, #60]	; (80011a4 <HAL_DMA_Abort_IT+0xcc>)
 8001166:	400a      	ands	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001172:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2225      	movs	r2, #37	; 0x25
 8001178:	2101      	movs	r1, #1
 800117a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2224      	movs	r2, #36	; 0x24
 8001180:	2100      	movs	r1, #0
 8001182:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	0010      	movs	r0, r2
 8001194:	4798      	blx	r3
    }
  }
  return status;
 8001196:	230f      	movs	r3, #15
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	fffffeff 	.word	0xfffffeff
 80011a8:	40020000 	.word	0x40020000

080011ac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80011b4:	4b55      	ldr	r3, [pc, #340]	; (800130c <HAL_DMA_IRQHandler+0x160>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	221c      	movs	r2, #28
 80011c8:	4013      	ands	r3, r2
 80011ca:	2204      	movs	r2, #4
 80011cc:	409a      	lsls	r2, r3
 80011ce:	0013      	movs	r3, r2
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	d027      	beq.n	8001226 <HAL_DMA_IRQHandler+0x7a>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2204      	movs	r2, #4
 80011da:	4013      	ands	r3, r2
 80011dc:	d023      	beq.n	8001226 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2220      	movs	r2, #32
 80011e6:	4013      	ands	r3, r2
 80011e8:	d107      	bne.n	80011fa <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2104      	movs	r1, #4
 80011f6:	438a      	bics	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_DMA_IRQHandler+0x160>)
 80011fc:	6859      	ldr	r1, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	221c      	movs	r2, #28
 8001204:	4013      	ands	r3, r2
 8001206:	2204      	movs	r2, #4
 8001208:	409a      	lsls	r2, r3
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <HAL_DMA_IRQHandler+0x160>)
 800120c:	430a      	orrs	r2, r1
 800120e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	2b00      	cmp	r3, #0
 8001216:	d100      	bne.n	800121a <HAL_DMA_IRQHandler+0x6e>
 8001218:	e073      	b.n	8001302 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	0010      	movs	r0, r2
 8001222:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001224:	e06d      	b.n	8001302 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	221c      	movs	r2, #28
 800122c:	4013      	ands	r3, r2
 800122e:	2202      	movs	r2, #2
 8001230:	409a      	lsls	r2, r3
 8001232:	0013      	movs	r3, r2
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	d02e      	beq.n	8001298 <HAL_DMA_IRQHandler+0xec>
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2202      	movs	r2, #2
 800123e:	4013      	ands	r3, r2
 8001240:	d02a      	beq.n	8001298 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2220      	movs	r2, #32
 800124a:	4013      	ands	r3, r2
 800124c:	d10b      	bne.n	8001266 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	210a      	movs	r1, #10
 800125a:	438a      	bics	r2, r1
 800125c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2225      	movs	r2, #37	; 0x25
 8001262:	2101      	movs	r1, #1
 8001264:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_DMA_IRQHandler+0x160>)
 8001268:	6859      	ldr	r1, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	221c      	movs	r2, #28
 8001270:	4013      	ands	r3, r2
 8001272:	2202      	movs	r2, #2
 8001274:	409a      	lsls	r2, r3
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_DMA_IRQHandler+0x160>)
 8001278:	430a      	orrs	r2, r1
 800127a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2224      	movs	r2, #36	; 0x24
 8001280:	2100      	movs	r1, #0
 8001282:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	2b00      	cmp	r3, #0
 800128a:	d03a      	beq.n	8001302 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	0010      	movs	r0, r2
 8001294:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001296:	e034      	b.n	8001302 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	221c      	movs	r2, #28
 800129e:	4013      	ands	r3, r2
 80012a0:	2208      	movs	r2, #8
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	d02b      	beq.n	8001304 <HAL_DMA_IRQHandler+0x158>
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2208      	movs	r2, #8
 80012b0:	4013      	ands	r3, r2
 80012b2:	d027      	beq.n	8001304 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	210e      	movs	r1, #14
 80012c0:	438a      	bics	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_DMA_IRQHandler+0x160>)
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	221c      	movs	r2, #28
 80012ce:	4013      	ands	r3, r2
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_DMA_IRQHandler+0x160>)
 80012d6:	430a      	orrs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2225      	movs	r2, #37	; 0x25
 80012e4:	2101      	movs	r1, #1
 80012e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2224      	movs	r2, #36	; 0x24
 80012ec:	2100      	movs	r1, #0
 80012ee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	0010      	movs	r0, r2
 8001300:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46c0      	nop			; (mov r8, r8)
}
 8001306:	46bd      	mov	sp, r7
 8001308:	b004      	add	sp, #16
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020000 	.word	0x40020000

08001310 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001326:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001338:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <DMA_SetConfig+0x7c>)
 800133c:	6859      	ldr	r1, [r3, #4]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	221c      	movs	r2, #28
 8001344:	4013      	ands	r3, r2
 8001346:	2201      	movs	r2, #1
 8001348:	409a      	lsls	r2, r3
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <DMA_SetConfig+0x7c>)
 800134c:	430a      	orrs	r2, r1
 800134e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b10      	cmp	r3, #16
 800135e:	d108      	bne.n	8001372 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001370:	e007      	b.n	8001382 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	60da      	str	r2, [r3, #12]
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b004      	add	sp, #16
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	40020000 	.word	0x40020000

08001390 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80013a0:	4694      	mov	ip, r2
 80013a2:	4463      	add	r3, ip
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	001a      	movs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	001a      	movs	r2, r3
 80013b2:	23ff      	movs	r3, #255	; 0xff
 80013b4:	4013      	ands	r3, r2
 80013b6:	3b08      	subs	r3, #8
 80013b8:	2114      	movs	r1, #20
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7fe fea2 	bl	8000104 <__udivsi3>
 80013c0:	0003      	movs	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80013c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	221f      	movs	r2, #31
 80013ce:	4013      	ands	r3, r2
 80013d0:	2201      	movs	r2, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b004      	add	sp, #16
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	10008200 	.word	0x10008200
 80013e4:	40020880 	.word	0x40020880

080013e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	223f      	movs	r2, #63	; 0x3f
 80013f6:	4013      	ands	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80013fe:	4694      	mov	ip, r2
 8001400:	4463      	add	r3, ip
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	001a      	movs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800140e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3b01      	subs	r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	4013      	ands	r3, r2
 8001418:	2201      	movs	r2, #1
 800141a:	409a      	lsls	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b004      	add	sp, #16
 8001426:	bd80      	pop	{r7, pc}
 8001428:	1000823f 	.word	0x1000823f
 800142c:	40020940 	.word	0x40020940

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e147      	b.n	80016d0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4091      	lsls	r1, r2
 800144a:	000a      	movs	r2, r1
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d100      	bne.n	8001458 <HAL_GPIO_Init+0x28>
 8001456:	e138      	b.n	80016ca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	4013      	ands	r3, r2
 8001460:	2b01      	cmp	r3, #1
 8001462:	d005      	beq.n	8001470 <HAL_GPIO_Init+0x40>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	4013      	ands	r3, r2
 800146c:	2b02      	cmp	r3, #2
 800146e:	d130      	bne.n	80014d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	409a      	lsls	r2, r3
 800147e:	0013      	movs	r3, r2
 8001480:	43da      	mvns	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014a6:	2201      	movs	r2, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	2201      	movs	r2, #1
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d017      	beq.n	800150e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	4013      	ands	r3, r2
 8001516:	2b02      	cmp	r3, #2
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	58d3      	ldr	r3, [r2, r3]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2207      	movs	r2, #7
 800152c:	4013      	ands	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2107      	movs	r1, #7
 8001546:	400b      	ands	r3, r1
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	6939      	ldr	r1, [r7, #16]
 8001560:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	401a      	ands	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	029b      	lsls	r3, r3, #10
 800159e:	4013      	ands	r3, r2
 80015a0:	d100      	bne.n	80015a4 <HAL_GPIO_Init+0x174>
 80015a2:	e092      	b.n	80016ca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015a4:	4a50      	ldr	r2, [pc, #320]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3318      	adds	r3, #24
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	589b      	ldr	r3, [r3, r2]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4013      	ands	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	220f      	movs	r2, #15
 80015bc:	409a      	lsls	r2, r3
 80015be:	0013      	movs	r3, r2
 80015c0:	43da      	mvns	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	23a0      	movs	r3, #160	; 0xa0
 80015cc:	05db      	lsls	r3, r3, #23
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x1ca>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a45      	ldr	r2, [pc, #276]	; (80016ec <HAL_GPIO_Init+0x2bc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x1c6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a44      	ldr	r2, [pc, #272]	; (80016f0 <HAL_GPIO_Init+0x2c0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x1c2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a43      	ldr	r2, [pc, #268]	; (80016f4 <HAL_GPIO_Init+0x2c4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x1be>
 80015ea:	2303      	movs	r3, #3
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015fa:	2300      	movs	r3, #0
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	2103      	movs	r1, #3
 8001600:	400a      	ands	r2, r1
 8001602:	00d2      	lsls	r2, r2, #3
 8001604:	4093      	lsls	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800160c:	4936      	ldr	r1, [pc, #216]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3318      	adds	r3, #24
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	035b      	lsls	r3, r3, #13
 8001632:	4013      	ands	r3, r2
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43da      	mvns	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	039b      	lsls	r3, r3, #14
 800165c:	4013      	ands	r3, r2
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 8001670:	2384      	movs	r3, #132	; 0x84
 8001672:	58d3      	ldr	r3, [r2, r3]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43da      	mvns	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001694:	4914      	ldr	r1, [pc, #80]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 8001696:	2284      	movs	r2, #132	; 0x84
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	58d3      	ldr	r3, [r2, r3]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43da      	mvns	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	4013      	ands	r3, r2
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c2:	4909      	ldr	r1, [pc, #36]	; (80016e8 <HAL_GPIO_Init+0x2b8>)
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	40da      	lsrs	r2, r3
 80016d8:	1e13      	subs	r3, r2, #0
 80016da:	d000      	beq.n	80016de <HAL_GPIO_Init+0x2ae>
 80016dc:	e6b0      	b.n	8001440 <HAL_GPIO_Init+0x10>
  }
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b006      	add	sp, #24
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021800 	.word	0x40021800
 80016ec:	50000400 	.word	0x50000400
 80016f0:	50000800 	.word	0x50000800
 80016f4:	50000c00 	.word	0x50000c00

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	0008      	movs	r0, r1
 8001702:	0011      	movs	r1, r2
 8001704:	1cbb      	adds	r3, r7, #2
 8001706:	1c02      	adds	r2, r0, #0
 8001708:	801a      	strh	r2, [r3, #0]
 800170a:	1c7b      	adds	r3, r7, #1
 800170c:	1c0a      	adds	r2, r1, #0
 800170e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001710:	1c7b      	adds	r3, r7, #1
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001718:	1cbb      	adds	r3, r7, #2
 800171a:	881a      	ldrh	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001720:	e003      	b.n	800172a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001722:	1cbb      	adds	r3, r7, #2
 8001724:	881a      	ldrh	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001742:	4013      	ands	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d11f      	bne.n	8001798 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	0013      	movs	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	189b      	adds	r3, r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4912      	ldr	r1, [pc, #72]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001766:	0018      	movs	r0, r3
 8001768:	f7fe fccc 	bl	8000104 <__udivsi3>
 800176c:	0003      	movs	r3, r0
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001772:	e008      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3b01      	subs	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	e001      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e009      	b.n	800179a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	401a      	ands	r2, r3
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	429a      	cmp	r2, r3
 8001796:	d0ed      	beq.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	0018      	movs	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	b004      	add	sp, #16
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40007000 	.word	0x40007000
 80017a8:	fffff9ff 	.word	0xfffff9ff
 80017ac:	20000018 	.word	0x20000018
 80017b0:	000f4240 	.word	0x000f4240

080017b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	23e0      	movs	r3, #224	; 0xe0
 80017be:	01db      	lsls	r3, r3, #7
 80017c0:	4013      	ands	r3, r2
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e2fe      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	d100      	bne.n	80017ea <HAL_RCC_OscConfig+0x1e>
 80017e8:	e07c      	b.n	80018e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ea:	4bc3      	ldr	r3, [pc, #780]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2238      	movs	r2, #56	; 0x38
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f4:	4bc0      	ldr	r3, [pc, #768]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2203      	movs	r2, #3
 80017fa:	4013      	ands	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b10      	cmp	r3, #16
 8001802:	d102      	bne.n	800180a <HAL_RCC_OscConfig+0x3e>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d002      	beq.n	8001810 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d10b      	bne.n	8001828 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	4bb9      	ldr	r3, [pc, #740]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	029b      	lsls	r3, r3, #10
 8001818:	4013      	ands	r3, r2
 800181a:	d062      	beq.n	80018e2 <HAL_RCC_OscConfig+0x116>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d15e      	bne.n	80018e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e2d9      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	025b      	lsls	r3, r3, #9
 8001830:	429a      	cmp	r2, r3
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x78>
 8001834:	4bb0      	ldr	r3, [pc, #704]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4baf      	ldr	r3, [pc, #700]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0249      	lsls	r1, r1, #9
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e020      	b.n	8001886 <HAL_RCC_OscConfig+0xba>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	23a0      	movs	r3, #160	; 0xa0
 800184a:	02db      	lsls	r3, r3, #11
 800184c:	429a      	cmp	r2, r3
 800184e:	d10e      	bne.n	800186e <HAL_RCC_OscConfig+0xa2>
 8001850:	4ba9      	ldr	r3, [pc, #676]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4ba8      	ldr	r3, [pc, #672]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	02c9      	lsls	r1, r1, #11
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	4ba6      	ldr	r3, [pc, #664]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4ba5      	ldr	r3, [pc, #660]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0249      	lsls	r1, r1, #9
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0xba>
 800186e:	4ba2      	ldr	r3, [pc, #648]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4ba1      	ldr	r3, [pc, #644]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001874:	49a1      	ldr	r1, [pc, #644]	; (8001afc <HAL_RCC_OscConfig+0x330>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	4b9f      	ldr	r3, [pc, #636]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b9e      	ldr	r3, [pc, #632]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001880:	499f      	ldr	r1, [pc, #636]	; (8001b00 <HAL_RCC_OscConfig+0x334>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d014      	beq.n	80018b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff f9c9 	bl	8000c24 <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff f9c4 	bl	8000c24 <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e298      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018aa:	4b93      	ldr	r3, [pc, #588]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	029b      	lsls	r3, r3, #10
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0xcc>
 80018b6:	e015      	b.n	80018e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f9b4 	bl	8000c24 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c2:	f7ff f9af 	bl	8000c24 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b64      	cmp	r3, #100	; 0x64
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e283      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d4:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	4013      	ands	r3, r2
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0xf6>
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d100      	bne.n	80018f0 <HAL_RCC_OscConfig+0x124>
 80018ee:	e099      	b.n	8001a24 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f0:	4b81      	ldr	r3, [pc, #516]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2238      	movs	r2, #56	; 0x38
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fa:	4b7f      	ldr	r3, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2203      	movs	r2, #3
 8001900:	4013      	ands	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b10      	cmp	r3, #16
 8001908:	d102      	bne.n	8001910 <HAL_RCC_OscConfig+0x144>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d002      	beq.n	8001916 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d135      	bne.n	8001982 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001916:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4013      	ands	r3, r2
 8001920:	d005      	beq.n	800192e <HAL_RCC_OscConfig+0x162>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e256      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192e:	4b72      	ldr	r3, [pc, #456]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a74      	ldr	r2, [pc, #464]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001934:	4013      	ands	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	021a      	lsls	r2, r3, #8
 800193e:	4b6e      	ldr	r3, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001940:	430a      	orrs	r2, r1
 8001942:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d112      	bne.n	8001970 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800194a:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <HAL_RCC_OscConfig+0x33c>)
 8001950:	4013      	ands	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800195e:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0adb      	lsrs	r3, r3, #11
 8001964:	2207      	movs	r2, #7
 8001966:	4013      	ands	r3, r2
 8001968:	4a68      	ldr	r2, [pc, #416]	; (8001b0c <HAL_RCC_OscConfig+0x340>)
 800196a:	40da      	lsrs	r2, r3
 800196c:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_RCC_OscConfig+0x344>)
 800196e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001970:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <HAL_RCC_OscConfig+0x348>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff f8f9 	bl	8000b6c <HAL_InitTick>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d051      	beq.n	8001a22 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e22c      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d030      	beq.n	80019ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800198a:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5e      	ldr	r2, [pc, #376]	; (8001b08 <HAL_RCC_OscConfig+0x33c>)
 8001990:	4013      	ands	r3, r2
 8001992:	0019      	movs	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b55      	ldr	r3, [pc, #340]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0049      	lsls	r1, r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f93a 	bl	8000c24 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff f935 	bl	8000c24 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e209      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a4a      	ldr	r2, [pc, #296]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019da:	4013      	ands	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	021a      	lsls	r2, r3, #8
 80019e4:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	e01b      	b.n	8001a24 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019ec:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	4949      	ldr	r1, [pc, #292]	; (8001b18 <HAL_RCC_OscConfig+0x34c>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f914 	bl	8000c24 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff f90f 	bl	8000c24 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1e3      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a14:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x236>
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d047      	beq.n	8001abe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a2e:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2238      	movs	r2, #56	; 0x38
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b18      	cmp	r3, #24
 8001a38:	d10a      	bne.n	8001a50 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d03c      	beq.n	8001abe <HAL_RCC_OscConfig+0x2f2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d138      	bne.n	8001abe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e1c5      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d019      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	430a      	orrs	r2, r1
 8001a62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f8de 	bl	8000c24 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6e:	f7ff f8d9 	bl	8000c24 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e1ad      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a84:	2202      	movs	r2, #2
 8001a86:	4013      	ands	r3, r2
 8001a88:	d0f1      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2a2>
 8001a8a:	e018      	b.n	8001abe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	438a      	bics	r2, r1
 8001a96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f8c4 	bl	8000c24 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f8bf 	bl	8000c24 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e193      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d1f1      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d100      	bne.n	8001aca <HAL_RCC_OscConfig+0x2fe>
 8001ac8:	e0c6      	b.n	8001c58 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aca:	231f      	movs	r3, #31
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2238      	movs	r2, #56	; 0x38
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	d11e      	bne.n	8001b1c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d100      	bne.n	8001aea <HAL_RCC_OscConfig+0x31e>
 8001ae8:	e0b6      	b.n	8001c58 <HAL_RCC_OscConfig+0x48c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d000      	beq.n	8001af4 <HAL_RCC_OscConfig+0x328>
 8001af2:	e0b1      	b.n	8001c58 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e171      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	fffeffff 	.word	0xfffeffff
 8001b00:	fffbffff 	.word	0xfffbffff
 8001b04:	ffff80ff 	.word	0xffff80ff
 8001b08:	ffffc7ff 	.word	0xffffc7ff
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	20000018 	.word	0x20000018
 8001b14:	2000001c 	.word	0x2000001c
 8001b18:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b1c:	4bb1      	ldr	r3, [pc, #708]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	055b      	lsls	r3, r3, #21
 8001b24:	4013      	ands	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_OscConfig+0x360>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x362>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d011      	beq.n	8001b56 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4bac      	ldr	r3, [pc, #688]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b36:	4bab      	ldr	r3, [pc, #684]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	0549      	lsls	r1, r1, #21
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b40:	4ba8      	ldr	r3, [pc, #672]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	055b      	lsls	r3, r3, #21
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b4e:	231f      	movs	r3, #31
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b56:	4ba4      	ldr	r3, [pc, #656]	; (8001de8 <HAL_RCC_OscConfig+0x61c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d11a      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b62:	4ba1      	ldr	r3, [pc, #644]	; (8001de8 <HAL_RCC_OscConfig+0x61c>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4ba0      	ldr	r3, [pc, #640]	; (8001de8 <HAL_RCC_OscConfig+0x61c>)
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0049      	lsls	r1, r1, #1
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b70:	f7ff f858 	bl	8000c24 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff f853 	bl	8000c24 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e127      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8c:	4b96      	ldr	r3, [pc, #600]	; (8001de8 <HAL_RCC_OscConfig+0x61c>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x3e2>
 8001ba0:	4b90      	ldr	r3, [pc, #576]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001ba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ba4:	4b8f      	ldr	r3, [pc, #572]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x41c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x404>
 8001bb6:	4b8b      	ldr	r3, [pc, #556]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001bb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bba:	4b8a      	ldr	r3, [pc, #552]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bc2:	4b88      	ldr	r3, [pc, #544]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001bc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc6:	4b87      	ldr	r3, [pc, #540]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0x41c>
 8001bd0:	4b84      	ldr	r3, [pc, #528]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd4:	4b83      	ldr	r3, [pc, #524]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bdc:	4b81      	ldr	r3, [pc, #516]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001bde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001be0:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001be2:	2104      	movs	r1, #4
 8001be4:	438a      	bics	r2, r1
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d014      	beq.n	8001c1a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f818 	bl	8000c24 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf8:	e009      	b.n	8001c0e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff f813 	bl	8000c24 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	4a79      	ldr	r2, [pc, #484]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0e6      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0e:	4b75      	ldr	r3, [pc, #468]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	2202      	movs	r2, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x42e>
 8001c18:	e013      	b.n	8001c42 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f803 	bl	8000c24 <HAL_GetTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c22:	e009      	b.n	8001c38 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7fe fffe 	bl	8000c24 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	4a6f      	ldr	r2, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e0d1      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c42:	231f      	movs	r3, #31
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c4c:	4b65      	ldr	r3, [pc, #404]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c50:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001c52:	4967      	ldr	r1, [pc, #412]	; (8001df0 <HAL_RCC_OscConfig+0x624>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d100      	bne.n	8001c62 <HAL_RCC_OscConfig+0x496>
 8001c60:	e0bb      	b.n	8001dda <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c62:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2238      	movs	r2, #56	; 0x38
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b10      	cmp	r3, #16
 8001c6c:	d100      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4a4>
 8001c6e:	e07b      	b.n	8001d68 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d156      	bne.n	8001d26 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b5a      	ldr	r3, [pc, #360]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001c7e:	495d      	ldr	r1, [pc, #372]	; (8001df4 <HAL_RCC_OscConfig+0x628>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7fe ffce 	bl	8000c24 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe ffc9 	bl	8000c24 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e09d      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	4b50      	ldr	r3, [pc, #320]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	049b      	lsls	r3, r3, #18
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cac:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4a51      	ldr	r2, [pc, #324]	; (8001df8 <HAL_RCC_OscConfig+0x62c>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	0449      	lsls	r1, r1, #17
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	0549      	lsls	r1, r1, #21
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe ff92 	bl	8000c24 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe ff8d 	bl	8000c24 <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e061      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	049b      	lsls	r3, r3, #18
 8001d20:	4013      	ands	r3, r2
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x53a>
 8001d24:	e059      	b.n	8001dda <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d2c:	4931      	ldr	r1, [pc, #196]	; (8001df4 <HAL_RCC_OscConfig+0x628>)
 8001d2e:	400a      	ands	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7fe ff77 	bl	8000c24 <HAL_GetTick>
 8001d36:	0003      	movs	r3, r0
 8001d38:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7fe ff72 	bl	8000c24 <HAL_GetTick>
 8001d40:	0002      	movs	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e046      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	049b      	lsls	r3, r3, #18
 8001d56:	4013      	ands	r3, r2
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d60:	4926      	ldr	r1, [pc, #152]	; (8001dfc <HAL_RCC_OscConfig+0x630>)
 8001d62:	400a      	ands	r2, r1
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	e038      	b.n	8001dda <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e033      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x618>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d126      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2270      	movs	r2, #112	; 0x70
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d11f      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	23fe      	movs	r3, #254	; 0xfe
 8001d9a:	01db      	lsls	r3, r3, #7
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d116      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	23f8      	movs	r3, #248	; 0xf8
 8001dac:	039b      	lsls	r3, r3, #14
 8001dae:	401a      	ands	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d10e      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	23e0      	movs	r3, #224	; 0xe0
 8001dbc:	051b      	lsls	r3, r3, #20
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	0f5b      	lsrs	r3, r3, #29
 8001dcc:	075a      	lsls	r2, r3, #29
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b008      	add	sp, #32
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40007000 	.word	0x40007000
 8001dec:	00001388 	.word	0x00001388
 8001df0:	efffffff 	.word	0xefffffff
 8001df4:	feffffff 	.word	0xfeffffff
 8001df8:	11c1808c 	.word	0x11c1808c
 8001dfc:	eefefffc 	.word	0xeefefffc

08001e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0e9      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e14:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d91e      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2207      	movs	r2, #7
 8001e28:	4393      	bics	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	4b70      	ldr	r3, [pc, #448]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e34:	f7fe fef6 	bl	8000c24 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e3c:	e009      	b.n	8001e52 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3e:	f7fe fef1 	bl	8000c24 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e0ca      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e52:	4b67      	ldr	r3, [pc, #412]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2207      	movs	r2, #7
 8001e58:	4013      	ands	r3, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d015      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	4013      	ands	r3, r2
 8001e72:	d006      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e74:	4b60      	ldr	r3, [pc, #384]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7a:	21e0      	movs	r1, #224	; 0xe0
 8001e7c:	01c9      	lsls	r1, r1, #7
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4a5d      	ldr	r2, [pc, #372]	; (8001ffc <HAL_RCC_ClockConfig+0x1fc>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d057      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	029b      	lsls	r3, r3, #10
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d12b      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e097      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec0:	4b4d      	ldr	r3, [pc, #308]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	049b      	lsls	r3, r3, #18
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d11f      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e08b      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed8:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d113      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e07f      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef0:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e074      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e06d      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2207      	movs	r2, #7
 8001f12:	4393      	bics	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4b37      	ldr	r3, [pc, #220]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f20:	f7fe fe80 	bl	8000c24 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f28:	e009      	b.n	8001f3e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2a:	f7fe fe7b 	bl	8000c24 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e054      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2238      	movs	r2, #56	; 0x38
 8001f44:	401a      	ands	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1ec      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2207      	movs	r2, #7
 8001f56:	4013      	ands	r3, r2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d21e      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2207      	movs	r2, #7
 8001f64:	4393      	bics	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f70:	f7fe fe58 	bl	8000c24 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f78:	e009      	b.n	8001f8e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7a:	f7fe fe53 	bl	8000c24 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e02c      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2207      	movs	r2, #7
 8001f94:	4013      	ands	r3, r2
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <HAL_RCC_ClockConfig+0x200>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fba:	f000 f829 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fbe:	0001      	movs	r1, r0
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	401a      	ands	r2, r3
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_RCC_ClockConfig+0x204>)
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	58d3      	ldr	r3, [r2, r3]
 8001fd0:	221f      	movs	r2, #31
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	000a      	movs	r2, r1
 8001fd6:	40da      	lsrs	r2, r3
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_ClockConfig+0x208>)
 8001fda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x20c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7fe fdc3 	bl	8000b6c <HAL_InitTick>
 8001fe6:	0003      	movs	r3, r0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b004      	add	sp, #16
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	00001388 	.word	0x00001388
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	fffff0ff 	.word	0xfffff0ff
 8002000:	ffff8fff 	.word	0xffff8fff
 8002004:	08003f0c 	.word	0x08003f0c
 8002008:	20000018 	.word	0x20000018
 800200c:	2000001c 	.word	0x2000001c

08002010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2238      	movs	r2, #56	; 0x38
 800201c:	4013      	ands	r3, r2
 800201e:	d10f      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002020:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0adb      	lsrs	r3, r3, #11
 8002026:	2207      	movs	r2, #7
 8002028:	4013      	ands	r3, r2
 800202a:	2201      	movs	r2, #1
 800202c:	409a      	lsls	r2, r3
 800202e:	0013      	movs	r3, r2
 8002030:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002032:	6839      	ldr	r1, [r7, #0]
 8002034:	4835      	ldr	r0, [pc, #212]	; (800210c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002036:	f7fe f865 	bl	8000104 <__udivsi3>
 800203a:	0003      	movs	r3, r0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e05d      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002040:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2238      	movs	r2, #56	; 0x38
 8002046:	4013      	ands	r3, r2
 8002048:	2b08      	cmp	r3, #8
 800204a:	d102      	bne.n	8002052 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800204c:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCC_GetSysClockFreq+0x100>)
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e054      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2238      	movs	r2, #56	; 0x38
 8002058:	4013      	ands	r3, r2
 800205a:	2b10      	cmp	r3, #16
 800205c:	d138      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2203      	movs	r2, #3
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	2207      	movs	r2, #7
 8002070:	4013      	ands	r3, r2
 8002072:	3301      	adds	r3, #1
 8002074:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d10d      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	4824      	ldr	r0, [pc, #144]	; (8002110 <HAL_RCC_GetSysClockFreq+0x100>)
 8002080:	f7fe f840 	bl	8000104 <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	0019      	movs	r1, r3
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	227f      	movs	r2, #127	; 0x7f
 8002090:	4013      	ands	r3, r2
 8002092:	434b      	muls	r3, r1
 8002094:	617b      	str	r3, [r7, #20]
        break;
 8002096:	e00d      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	481c      	ldr	r0, [pc, #112]	; (800210c <HAL_RCC_GetSysClockFreq+0xfc>)
 800209c:	f7fe f832 	bl	8000104 <__udivsi3>
 80020a0:	0003      	movs	r3, r0
 80020a2:	0019      	movs	r1, r3
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	227f      	movs	r2, #127	; 0x7f
 80020ac:	4013      	ands	r3, r2
 80020ae:	434b      	muls	r3, r1
 80020b0:	617b      	str	r3, [r7, #20]
        break;
 80020b2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0f5b      	lsrs	r3, r3, #29
 80020ba:	2207      	movs	r2, #7
 80020bc:	4013      	ands	r3, r2
 80020be:	3301      	adds	r3, #1
 80020c0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f7fe f81d 	bl	8000104 <__udivsi3>
 80020ca:	0003      	movs	r3, r0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e015      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020d0:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2238      	movs	r2, #56	; 0x38
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d103      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2238      	movs	r2, #56	; 0x38
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b18      	cmp	r3, #24
 80020ee:	d103      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020f0:	23fa      	movs	r3, #250	; 0xfa
 80020f2:	01db      	lsls	r3, r3, #7
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	e001      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020fc:	693b      	ldr	r3, [r7, #16]
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b006      	add	sp, #24
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	40021000 	.word	0x40021000
 800210c:	00f42400 	.word	0x00f42400
 8002110:	007a1200 	.word	0x007a1200

08002114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <HAL_RCC_GetHCLKFreq+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	20000018 	.word	0x20000018

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800212c:	f7ff fff2 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002130:	0004      	movs	r4, r0
 8002132:	f7ff fb3f 	bl	80017b4 <LL_RCC_GetAPB1Prescaler>
 8002136:	0003      	movs	r3, r0
 8002138:	0b1a      	lsrs	r2, r3, #12
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	58d3      	ldr	r3, [r2, r3]
 8002140:	221f      	movs	r2, #31
 8002142:	4013      	ands	r3, r2
 8002144:	40dc      	lsrs	r4, r3
 8002146:	0023      	movs	r3, r4
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bdb0      	pop	{r4, r5, r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	08003f4c 	.word	0x08003f4c

08002154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800215c:	2313      	movs	r3, #19
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002164:	2312      	movs	r3, #18
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	029b      	lsls	r3, r3, #10
 8002174:	4013      	ands	r3, r2
 8002176:	d100      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002178:	e0a3      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217a:	2011      	movs	r0, #17
 800217c:	183b      	adds	r3, r7, r0
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002182:	4bc3      	ldr	r3, [pc, #780]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	055b      	lsls	r3, r3, #21
 800218a:	4013      	ands	r3, r2
 800218c:	d110      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4bc0      	ldr	r3, [pc, #768]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002192:	4bbf      	ldr	r3, [pc, #764]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0549      	lsls	r1, r1, #21
 8002198:	430a      	orrs	r2, r1
 800219a:	63da      	str	r2, [r3, #60]	; 0x3c
 800219c:	4bbc      	ldr	r3, [pc, #752]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800219e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	055b      	lsls	r3, r3, #21
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021aa:	183b      	adds	r3, r7, r0
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b0:	4bb8      	ldr	r3, [pc, #736]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4bb7      	ldr	r3, [pc, #732]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	0049      	lsls	r1, r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021be:	f7fe fd31 	bl	8000c24 <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021c6:	e00b      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c8:	f7fe fd2c 	bl	8000c24 <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d904      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021d6:	2313      	movs	r3, #19
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2203      	movs	r2, #3
 80021dc:	701a      	strb	r2, [r3, #0]
        break;
 80021de:	e005      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021e0:	4bac      	ldr	r3, [pc, #688]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	d0ed      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021ec:	2313      	movs	r3, #19
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d154      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021f6:	4ba6      	ldr	r3, [pc, #664]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021fa:	23c0      	movs	r3, #192	; 0xc0
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4013      	ands	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d019      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	429a      	cmp	r2, r3
 8002210:	d014      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002212:	4b9f      	ldr	r3, [pc, #636]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	4aa0      	ldr	r2, [pc, #640]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002218:	4013      	ands	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800221c:	4b9c      	ldr	r3, [pc, #624]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002220:	4b9b      	ldr	r3, [pc, #620]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	0249      	lsls	r1, r1, #9
 8002226:	430a      	orrs	r2, r1
 8002228:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800222a:	4b99      	ldr	r3, [pc, #612]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800222e:	4b98      	ldr	r3, [pc, #608]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	499a      	ldr	r1, [pc, #616]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002232:	400a      	ands	r2, r1
 8002234:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002236:	4b96      	ldr	r3, [pc, #600]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2201      	movs	r2, #1
 8002240:	4013      	ands	r3, r2
 8002242:	d016      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fcee 	bl	8000c24 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224c:	e00c      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe fce9 	bl	8000c24 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	4a91      	ldr	r2, [pc, #580]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d904      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800225e:	2313      	movs	r3, #19
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2203      	movs	r2, #3
 8002264:	701a      	strb	r2, [r3, #0]
            break;
 8002266:	e004      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002268:	4b89      	ldr	r3, [pc, #548]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	2202      	movs	r2, #2
 800226e:	4013      	ands	r3, r2
 8002270:	d0ed      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002272:	2313      	movs	r3, #19
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800227c:	4b84      	ldr	r3, [pc, #528]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	4a85      	ldr	r2, [pc, #532]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002282:	4013      	ands	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228a:	4b81      	ldr	r3, [pc, #516]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228c:	430a      	orrs	r2, r1
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002290:	e00c      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002292:	2312      	movs	r3, #18
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2213      	movs	r2, #19
 8002298:	18ba      	adds	r2, r7, r2
 800229a:	7812      	ldrb	r2, [r2, #0]
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	e005      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a0:	2312      	movs	r3, #18
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2213      	movs	r2, #19
 80022a6:	18ba      	adds	r2, r7, r2
 80022a8:	7812      	ldrb	r2, [r2, #0]
 80022aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ac:	2311      	movs	r3, #17
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ba:	4b75      	ldr	r3, [pc, #468]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022bc:	4979      	ldr	r1, [pc, #484]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80022be:	400a      	ands	r2, r1
 80022c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022cc:	4b70      	ldr	r3, [pc, #448]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	2203      	movs	r2, #3
 80022d2:	4393      	bics	r3, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d009      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ea:	4b69      	ldr	r3, [pc, #420]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	220c      	movs	r2, #12
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4b65      	ldr	r3, [pc, #404]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2210      	movs	r2, #16
 8002304:	4013      	ands	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002308:	4b61      	ldr	r3, [pc, #388]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	4a66      	ldr	r2, [pc, #408]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002318:	430a      	orrs	r2, r1
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4013      	ands	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	4a5f      	ldr	r2, [pc, #380]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	4b56      	ldr	r3, [pc, #344]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002338:	430a      	orrs	r2, r1
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4013      	ands	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002348:	4b51      	ldr	r3, [pc, #324]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002358:	430a      	orrs	r2, r1
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2220      	movs	r2, #32
 8002362:	4013      	ands	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002366:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	4a52      	ldr	r2, [pc, #328]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800236c:	4013      	ands	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	4b46      	ldr	r3, [pc, #280]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002376:	430a      	orrs	r2, r1
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	01db      	lsls	r3, r3, #7
 8002382:	4013      	ands	r3, r2
 8002384:	d015      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002386:	4b42      	ldr	r3, [pc, #264]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	0899      	lsrs	r1, r3, #2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002394:	430a      	orrs	r2, r1
 8002396:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	05db      	lsls	r3, r3, #23
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d106      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	0249      	lsls	r1, r1, #9
 80023ae:	430a      	orrs	r2, r1
 80023b0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	031b      	lsls	r3, r3, #12
 80023ba:	4013      	ands	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023be:	4b34      	ldr	r3, [pc, #208]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	4393      	bics	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ce:	430a      	orrs	r2, r1
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	039b      	lsls	r3, r3, #14
 80023da:	4013      	ands	r3, r2
 80023dc:	d016      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023de:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	4a35      	ldr	r2, [pc, #212]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	03db      	lsls	r3, r3, #15
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d106      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	0449      	lsls	r1, r1, #17
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	03db      	lsls	r3, r3, #15
 8002414:	4013      	ands	r3, r2
 8002416:	d016      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002428:	430a      	orrs	r2, r1
 800242a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	045b      	lsls	r3, r3, #17
 8002434:	429a      	cmp	r2, r3
 8002436:	d106      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0449      	lsls	r1, r1, #17
 8002442:	430a      	orrs	r2, r1
 8002444:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	4013      	ands	r3, r2
 8002450:	d016      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	4a1a      	ldr	r2, [pc, #104]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002458:	4013      	ands	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002462:	430a      	orrs	r2, r1
 8002464:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	01db      	lsls	r3, r3, #7
 800246e:	429a      	cmp	r2, r3
 8002470:	d106      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002478:	2180      	movs	r1, #128	; 0x80
 800247a:	0249      	lsls	r1, r1, #9
 800247c:	430a      	orrs	r2, r1
 800247e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002480:	2312      	movs	r3, #18
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b006      	add	sp, #24
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	40021000 	.word	0x40021000
 8002494:	40007000 	.word	0x40007000
 8002498:	fffffcff 	.word	0xfffffcff
 800249c:	fffeffff 	.word	0xfffeffff
 80024a0:	00001388 	.word	0x00001388
 80024a4:	efffffff 	.word	0xefffffff
 80024a8:	fffff3ff 	.word	0xfffff3ff
 80024ac:	fff3ffff 	.word	0xfff3ffff
 80024b0:	ffcfffff 	.word	0xffcfffff
 80024b4:	ffffcfff 	.word	0xffffcfff
 80024b8:	ffbfffff 	.word	0xffbfffff
 80024bc:	feffffff 	.word	0xfeffffff
 80024c0:	ffff3fff 	.word	0xffff3fff

080024c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e046      	b.n	8002564 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2288      	movs	r2, #136	; 0x88
 80024da:	589b      	ldr	r3, [r3, r2]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2284      	movs	r2, #132	; 0x84
 80024e4:	2100      	movs	r1, #0
 80024e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7fe f9f4 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2288      	movs	r2, #136	; 0x88
 80024f4:	2124      	movs	r1, #36	; 0x24
 80024f6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2101      	movs	r1, #1
 8002504:	438a      	bics	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 ff36 	bl	8003384 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fc74 	bl	8002e08 <UART_SetConfig>
 8002520:	0003      	movs	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e01c      	b.n	8002564 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	490d      	ldr	r1, [pc, #52]	; (800256c <HAL_UART_Init+0xa8>)
 8002536:	400a      	ands	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	212a      	movs	r1, #42	; 0x2a
 8002546:	438a      	bics	r2, r1
 8002548:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 ffc5 	bl	80034ec <UART_CheckIdleState>
 8002562:	0003      	movs	r3, r0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	ffffb7ff 	.word	0xffffb7ff

08002570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	1dbb      	adds	r3, r7, #6
 800257e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2288      	movs	r2, #136	; 0x88
 8002584:	589b      	ldr	r3, [r3, r2]
 8002586:	2b20      	cmp	r3, #32
 8002588:	d000      	beq.n	800258c <HAL_UART_Transmit+0x1c>
 800258a:	e090      	b.n	80026ae <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_UART_Transmit+0x2a>
 8002592:	1dbb      	adds	r3, r7, #6
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e088      	b.n	80026b0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d109      	bne.n	80025be <HAL_UART_Transmit+0x4e>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4013      	ands	r3, r2
 80025b8:	d001      	beq.n	80025be <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e078      	b.n	80026b0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2290      	movs	r2, #144	; 0x90
 80025c2:	2100      	movs	r1, #0
 80025c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2288      	movs	r2, #136	; 0x88
 80025ca:	2121      	movs	r1, #33	; 0x21
 80025cc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ce:	f7fe fb29 	bl	8000c24 <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1dba      	adds	r2, r7, #6
 80025da:	2154      	movs	r1, #84	; 0x54
 80025dc:	8812      	ldrh	r2, [r2, #0]
 80025de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1dba      	adds	r2, r7, #6
 80025e4:	2156      	movs	r1, #86	; 0x56
 80025e6:	8812      	ldrh	r2, [r2, #0]
 80025e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	015b      	lsls	r3, r3, #5
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d108      	bne.n	8002608 <HAL_UART_Transmit+0x98>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	e003      	b.n	8002610 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002610:	e030      	b.n	8002674 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	0013      	movs	r3, r2
 800261c:	2200      	movs	r2, #0
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	f001 f80e 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d005      	beq.n	8002634 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2288      	movs	r2, #136	; 0x88
 800262c:	2120      	movs	r1, #32
 800262e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e03d      	b.n	80026b0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10b      	bne.n	8002652 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	001a      	movs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	05d2      	lsls	r2, r2, #23
 8002646:	0dd2      	lsrs	r2, r2, #23
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	3302      	adds	r3, #2
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	e007      	b.n	8002662 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	3301      	adds	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2256      	movs	r2, #86	; 0x56
 8002666:	5a9b      	ldrh	r3, [r3, r2]
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b299      	uxth	r1, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2256      	movs	r2, #86	; 0x56
 8002672:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2256      	movs	r2, #86	; 0x56
 8002678:	5a9b      	ldrh	r3, [r3, r2]
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1c8      	bne.n	8002612 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	0013      	movs	r3, r2
 800268a:	2200      	movs	r2, #0
 800268c:	2140      	movs	r1, #64	; 0x40
 800268e:	f000 ffd7 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d005      	beq.n	80026a2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2288      	movs	r2, #136	; 0x88
 800269a:	2120      	movs	r1, #32
 800269c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e006      	b.n	80026b0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2288      	movs	r2, #136	; 0x88
 80026a6:	2120      	movs	r1, #32
 80026a8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
  }
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b008      	add	sp, #32
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	1dbb      	adds	r3, r7, #6
 80026c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	228c      	movs	r2, #140	; 0x8c
 80026ca:	589b      	ldr	r3, [r3, r2]
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d14a      	bne.n	8002766 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_UART_Receive_DMA+0x26>
 80026d6:	1dbb      	adds	r3, r7, #6
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e042      	b.n	8002768 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	015b      	lsls	r3, r3, #5
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d109      	bne.n	8002702 <HAL_UART_Receive_DMA+0x4a>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4013      	ands	r3, r2
 80026fc:	d001      	beq.n	8002702 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e032      	b.n	8002768 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_UART_Receive_DMA+0xb8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d020      	beq.n	8002754 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	4013      	ands	r3, r2
 800271e:	d019      	beq.n	8002754 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002720:	f3ef 8310 	mrs	r3, PRIMASK
 8002724:	613b      	str	r3, [r7, #16]
  return(result);
 8002726:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	2301      	movs	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f383 8810 	msr	PRIMASK, r3
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	04c9      	lsls	r1, r1, #19
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f383 8810 	msr	PRIMASK, r3
}
 8002752:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002754:	1dbb      	adds	r3, r7, #6
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	0018      	movs	r0, r3
 800275e:	f000 ffdf 	bl	8003720 <UART_Start_Receive_DMA>
 8002762:	0003      	movs	r3, r0
 8002764:	e000      	b.n	8002768 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b008      	add	sp, #32
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40008000 	.word	0x40008000

08002774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b0aa      	sub	sp, #168	; 0xa8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	22a4      	movs	r2, #164	; 0xa4
 8002784:	18b9      	adds	r1, r7, r2
 8002786:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	20a0      	movs	r0, #160	; 0xa0
 8002790:	1839      	adds	r1, r7, r0
 8002792:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	249c      	movs	r4, #156	; 0x9c
 800279c:	1939      	adds	r1, r7, r4
 800279e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027a0:	0011      	movs	r1, r2
 80027a2:	18bb      	adds	r3, r7, r2
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4aa2      	ldr	r2, [pc, #648]	; (8002a30 <HAL_UART_IRQHandler+0x2bc>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	2298      	movs	r2, #152	; 0x98
 80027ac:	18bd      	adds	r5, r7, r2
 80027ae:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80027b0:	18bb      	adds	r3, r7, r2
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11a      	bne.n	80027ee <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2220      	movs	r2, #32
 80027be:	4013      	ands	r3, r2
 80027c0:	d015      	beq.n	80027ee <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027c2:	183b      	adds	r3, r7, r0
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2220      	movs	r2, #32
 80027c8:	4013      	ands	r3, r2
 80027ca:	d105      	bne.n	80027d8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027cc:	193b      	adds	r3, r7, r4
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	055b      	lsls	r3, r3, #21
 80027d4:	4013      	ands	r3, r2
 80027d6:	d00a      	beq.n	80027ee <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d100      	bne.n	80027e2 <HAL_UART_IRQHandler+0x6e>
 80027e0:	e2dc      	b.n	8002d9c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	0010      	movs	r0, r2
 80027ea:	4798      	blx	r3
      }
      return;
 80027ec:	e2d6      	b.n	8002d9c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027ee:	2398      	movs	r3, #152	; 0x98
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d100      	bne.n	80027fa <HAL_UART_IRQHandler+0x86>
 80027f8:	e122      	b.n	8002a40 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027fa:	239c      	movs	r3, #156	; 0x9c
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a8c      	ldr	r2, [pc, #560]	; (8002a34 <HAL_UART_IRQHandler+0x2c0>)
 8002802:	4013      	ands	r3, r2
 8002804:	d106      	bne.n	8002814 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002806:	23a0      	movs	r3, #160	; 0xa0
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a8a      	ldr	r2, [pc, #552]	; (8002a38 <HAL_UART_IRQHandler+0x2c4>)
 800280e:	4013      	ands	r3, r2
 8002810:	d100      	bne.n	8002814 <HAL_UART_IRQHandler+0xa0>
 8002812:	e115      	b.n	8002a40 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002814:	23a4      	movs	r3, #164	; 0xa4
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d012      	beq.n	8002846 <HAL_UART_IRQHandler+0xd2>
 8002820:	23a0      	movs	r3, #160	; 0xa0
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4013      	ands	r3, r2
 800282c:	d00b      	beq.n	8002846 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2290      	movs	r2, #144	; 0x90
 800283a:	589b      	ldr	r3, [r3, r2]
 800283c:	2201      	movs	r2, #1
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2190      	movs	r1, #144	; 0x90
 8002844:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002846:	23a4      	movs	r3, #164	; 0xa4
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d011      	beq.n	8002876 <HAL_UART_IRQHandler+0x102>
 8002852:	239c      	movs	r3, #156	; 0x9c
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2201      	movs	r2, #1
 800285a:	4013      	ands	r3, r2
 800285c:	d00b      	beq.n	8002876 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2202      	movs	r2, #2
 8002864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2290      	movs	r2, #144	; 0x90
 800286a:	589b      	ldr	r3, [r3, r2]
 800286c:	2204      	movs	r2, #4
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2190      	movs	r1, #144	; 0x90
 8002874:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002876:	23a4      	movs	r3, #164	; 0xa4
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2204      	movs	r2, #4
 800287e:	4013      	ands	r3, r2
 8002880:	d011      	beq.n	80028a6 <HAL_UART_IRQHandler+0x132>
 8002882:	239c      	movs	r3, #156	; 0x9c
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	d00b      	beq.n	80028a6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2204      	movs	r2, #4
 8002894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2290      	movs	r2, #144	; 0x90
 800289a:	589b      	ldr	r3, [r3, r2]
 800289c:	2202      	movs	r2, #2
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2190      	movs	r1, #144	; 0x90
 80028a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028a6:	23a4      	movs	r3, #164	; 0xa4
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2208      	movs	r2, #8
 80028ae:	4013      	ands	r3, r2
 80028b0:	d017      	beq.n	80028e2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028b2:	23a0      	movs	r3, #160	; 0xa0
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2220      	movs	r2, #32
 80028ba:	4013      	ands	r3, r2
 80028bc:	d105      	bne.n	80028ca <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80028be:	239c      	movs	r3, #156	; 0x9c
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a5b      	ldr	r2, [pc, #364]	; (8002a34 <HAL_UART_IRQHandler+0x2c0>)
 80028c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028c8:	d00b      	beq.n	80028e2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2208      	movs	r2, #8
 80028d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2290      	movs	r2, #144	; 0x90
 80028d6:	589b      	ldr	r3, [r3, r2]
 80028d8:	2208      	movs	r2, #8
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2190      	movs	r1, #144	; 0x90
 80028e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028e2:	23a4      	movs	r3, #164	; 0xa4
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4013      	ands	r3, r2
 80028ee:	d013      	beq.n	8002918 <HAL_UART_IRQHandler+0x1a4>
 80028f0:	23a0      	movs	r3, #160	; 0xa0
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	04db      	lsls	r3, r3, #19
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00c      	beq.n	8002918 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2280      	movs	r2, #128	; 0x80
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2290      	movs	r2, #144	; 0x90
 800290c:	589b      	ldr	r3, [r3, r2]
 800290e:	2220      	movs	r2, #32
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2190      	movs	r1, #144	; 0x90
 8002916:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2290      	movs	r2, #144	; 0x90
 800291c:	589b      	ldr	r3, [r3, r2]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <HAL_UART_IRQHandler+0x1b0>
 8002922:	e23d      	b.n	8002da0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002924:	23a4      	movs	r3, #164	; 0xa4
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2220      	movs	r2, #32
 800292c:	4013      	ands	r3, r2
 800292e:	d015      	beq.n	800295c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002930:	23a0      	movs	r3, #160	; 0xa0
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	4013      	ands	r3, r2
 800293a:	d106      	bne.n	800294a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800293c:	239c      	movs	r3, #156	; 0x9c
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	055b      	lsls	r3, r3, #21
 8002946:	4013      	ands	r3, r2
 8002948:	d008      	beq.n	800295c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	0010      	movs	r0, r2
 800295a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2290      	movs	r2, #144	; 0x90
 8002960:	589b      	ldr	r3, [r3, r2]
 8002962:	2194      	movs	r1, #148	; 0x94
 8002964:	187a      	adds	r2, r7, r1
 8002966:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	4013      	ands	r3, r2
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d004      	beq.n	8002980 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002976:	187b      	adds	r3, r7, r1
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2228      	movs	r2, #40	; 0x28
 800297c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800297e:	d04c      	beq.n	8002a1a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0018      	movs	r0, r3
 8002984:	f000 ffb2 	bl	80038ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2240      	movs	r2, #64	; 0x40
 8002990:	4013      	ands	r3, r2
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d13c      	bne.n	8002a10 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002996:	f3ef 8310 	mrs	r3, PRIMASK
 800299a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800299c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800299e:	2090      	movs	r0, #144	; 0x90
 80029a0:	183a      	adds	r2, r7, r0
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	2301      	movs	r3, #1
 80029a6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029aa:	f383 8810 	msr	PRIMASK, r3
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2140      	movs	r1, #64	; 0x40
 80029bc:	438a      	bics	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	183b      	adds	r3, r7, r0
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	589b      	ldr	r3, [r3, r2]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	589b      	ldr	r3, [r3, r2]
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_UART_IRQHandler+0x2c8>)
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	589b      	ldr	r3, [r3, r2]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7fe fb75 	bl	80010d8 <HAL_DMA_Abort_IT>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d01c      	beq.n	8002a2c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	589b      	ldr	r3, [r3, r2]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	5852      	ldr	r2, [r2, r1]
 8002a00:	0010      	movs	r0, r2
 8002a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e012      	b.n	8002a2c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f9e9 	bl	8002de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0e:	e00d      	b.n	8002a2c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f9e4 	bl	8002de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a18:	e008      	b.n	8002a2c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 f9df 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2290      	movs	r2, #144	; 0x90
 8002a26:	2100      	movs	r1, #0
 8002a28:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a2a:	e1b9      	b.n	8002da0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	46c0      	nop			; (mov r8, r8)
    return;
 8002a2e:	e1b7      	b.n	8002da0 <HAL_UART_IRQHandler+0x62c>
 8002a30:	0000080f 	.word	0x0000080f
 8002a34:	10000001 	.word	0x10000001
 8002a38:	04000120 	.word	0x04000120
 8002a3c:	08003bb1 	.word	0x08003bb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d000      	beq.n	8002a4a <HAL_UART_IRQHandler+0x2d6>
 8002a48:	e13e      	b.n	8002cc8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a4a:	23a4      	movs	r3, #164	; 0xa4
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2210      	movs	r2, #16
 8002a52:	4013      	ands	r3, r2
 8002a54:	d100      	bne.n	8002a58 <HAL_UART_IRQHandler+0x2e4>
 8002a56:	e137      	b.n	8002cc8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a58:	23a0      	movs	r3, #160	; 0xa0
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2210      	movs	r2, #16
 8002a60:	4013      	ands	r3, r2
 8002a62:	d100      	bne.n	8002a66 <HAL_UART_IRQHandler+0x2f2>
 8002a64:	e130      	b.n	8002cc8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2240      	movs	r2, #64	; 0x40
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d000      	beq.n	8002a7e <HAL_UART_IRQHandler+0x30a>
 8002a7c:	e0a4      	b.n	8002bc8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	589b      	ldr	r3, [r3, r2]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	217e      	movs	r1, #126	; 0x7e
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d100      	bne.n	8002a98 <HAL_UART_IRQHandler+0x324>
 8002a96:	e185      	b.n	8002da4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	225c      	movs	r2, #92	; 0x5c
 8002a9c:	5a9b      	ldrh	r3, [r3, r2]
 8002a9e:	187a      	adds	r2, r7, r1
 8002aa0:	8812      	ldrh	r2, [r2, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d300      	bcc.n	8002aa8 <HAL_UART_IRQHandler+0x334>
 8002aa6:	e17d      	b.n	8002da4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	187a      	adds	r2, r7, r1
 8002aac:	215e      	movs	r1, #94	; 0x5e
 8002aae:	8812      	ldrh	r2, [r2, #0]
 8002ab0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	589b      	ldr	r3, [r3, r2]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2220      	movs	r2, #32
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d170      	bne.n	8002ba4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002acc:	2301      	movs	r3, #1
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	f383 8810 	msr	PRIMASK, r3
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	49b4      	ldr	r1, [pc, #720]	; (8002db4 <HAL_UART_IRQHandler+0x640>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	f383 8810 	msr	PRIMASK, r3
}
 8002af2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af4:	f3ef 8310 	mrs	r3, PRIMASK
 8002af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afc:	677b      	str	r3, [r7, #116]	; 0x74
 8002afe:	2301      	movs	r3, #1
 8002b00:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b04:	f383 8810 	msr	PRIMASK, r3
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	438a      	bics	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b20:	f383 8810 	msr	PRIMASK, r3
}
 8002b24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b26:	f3ef 8310 	mrs	r3, PRIMASK
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b30:	2301      	movs	r3, #1
 8002b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b36:	f383 8810 	msr	PRIMASK, r3
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2140      	movs	r1, #64	; 0x40
 8002b48:	438a      	bics	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b4e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b52:	f383 8810 	msr	PRIMASK, r3
}
 8002b56:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	228c      	movs	r2, #140	; 0x8c
 8002b5c:	2120      	movs	r1, #32
 8002b5e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b66:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b70:	2301      	movs	r3, #1
 8002b72:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b76:	f383 8810 	msr	PRIMASK, r3
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2110      	movs	r1, #16
 8002b88:	438a      	bics	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b92:	f383 8810 	msr	PRIMASK, r3
}
 8002b96:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	589b      	ldr	r3, [r3, r2]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7fe fa38 	bl	8001014 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	225c      	movs	r2, #92	; 0x5c
 8002bae:	5a9a      	ldrh	r2, [r3, r2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	215e      	movs	r1, #94	; 0x5e
 8002bb4:	5a5b      	ldrh	r3, [r3, r1]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f000 f915 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bc6:	e0ed      	b.n	8002da4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	225c      	movs	r2, #92	; 0x5c
 8002bcc:	5a99      	ldrh	r1, [r3, r2]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	225e      	movs	r2, #94	; 0x5e
 8002bd2:	5a9b      	ldrh	r3, [r3, r2]
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	208e      	movs	r0, #142	; 0x8e
 8002bd8:	183b      	adds	r3, r7, r0
 8002bda:	1a8a      	subs	r2, r1, r2
 8002bdc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	225e      	movs	r2, #94	; 0x5e
 8002be2:	5a9b      	ldrh	r3, [r3, r2]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d100      	bne.n	8002bec <HAL_UART_IRQHandler+0x478>
 8002bea:	e0dd      	b.n	8002da8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002bec:	183b      	adds	r3, r7, r0
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d100      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x482>
 8002bf4:	e0d8      	b.n	8002da8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bfe:	2488      	movs	r4, #136	; 0x88
 8002c00:	193a      	adds	r2, r7, r4
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	2301      	movs	r3, #1
 8002c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f383 8810 	msr	PRIMASK, r3
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4967      	ldr	r1, [pc, #412]	; (8002db8 <HAL_UART_IRQHandler+0x644>)
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f383 8810 	msr	PRIMASK, r3
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c32:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c34:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c36:	2484      	movs	r4, #132	; 0x84
 8002c38:	193a      	adds	r2, r7, r4
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f383 8810 	msr	PRIMASK, r3
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	495a      	ldr	r1, [pc, #360]	; (8002dbc <HAL_UART_IRQHandler+0x648>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	228c      	movs	r2, #140	; 0x8c
 8002c6a:	2120      	movs	r1, #32
 8002c6c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c82:	2480      	movs	r4, #128	; 0x80
 8002c84:	193a      	adds	r2, r7, r4
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	2301      	movs	r3, #1
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	f383 8810 	msr	PRIMASK, r3
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2110      	movs	r1, #16
 8002ca0:	438a      	bics	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	f383 8810 	msr	PRIMASK, r3
}
 8002cb0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cb8:	183b      	adds	r3, r7, r0
 8002cba:	881a      	ldrh	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f895 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cc6:	e06f      	b.n	8002da8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cc8:	23a4      	movs	r3, #164	; 0xa4
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	035b      	lsls	r3, r3, #13
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d010      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x584>
 8002cd6:	239c      	movs	r3, #156	; 0x9c
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	03db      	lsls	r3, r3, #15
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	0352      	lsls	r2, r2, #13
 8002cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f000 ffa0 	bl	8003c36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cf6:	e05a      	b.n	8002dae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cf8:	23a4      	movs	r3, #164	; 0xa4
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	4013      	ands	r3, r2
 8002d02:	d016      	beq.n	8002d32 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002d04:	23a0      	movs	r3, #160	; 0xa0
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d106      	bne.n	8002d1e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d10:	239c      	movs	r3, #156	; 0x9c
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d009      	beq.n	8002d32 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d042      	beq.n	8002dac <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	0010      	movs	r0, r2
 8002d2e:	4798      	blx	r3
    }
    return;
 8002d30:	e03c      	b.n	8002dac <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d32:	23a4      	movs	r3, #164	; 0xa4
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2240      	movs	r2, #64	; 0x40
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d00a      	beq.n	8002d54 <HAL_UART_IRQHandler+0x5e0>
 8002d3e:	23a0      	movs	r3, #160	; 0xa0
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2240      	movs	r2, #64	; 0x40
 8002d46:	4013      	ands	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 ff46 	bl	8003bde <UART_EndTransmit_IT>
    return;
 8002d52:	e02c      	b.n	8002dae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d54:	23a4      	movs	r3, #164	; 0xa4
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <HAL_UART_IRQHandler+0x606>
 8002d62:	23a0      	movs	r3, #160	; 0xa0
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	05db      	lsls	r3, r3, #23
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 ff6f 	bl	8003c56 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d78:	e019      	b.n	8002dae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d7a:	23a4      	movs	r3, #164	; 0xa4
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	045b      	lsls	r3, r3, #17
 8002d84:	4013      	ands	r3, r2
 8002d86:	d012      	beq.n	8002dae <HAL_UART_IRQHandler+0x63a>
 8002d88:	23a0      	movs	r3, #160	; 0xa0
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	da0d      	bge.n	8002dae <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 ff56 	bl	8003c46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d9a:	e008      	b.n	8002dae <HAL_UART_IRQHandler+0x63a>
      return;
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	e006      	b.n	8002dae <HAL_UART_IRQHandler+0x63a>
    return;
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	e004      	b.n	8002dae <HAL_UART_IRQHandler+0x63a>
      return;
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	e002      	b.n	8002dae <HAL_UART_IRQHandler+0x63a>
      return;
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	e000      	b.n	8002dae <HAL_UART_IRQHandler+0x63a>
    return;
 8002dac:	46c0      	nop			; (mov r8, r8)
  }
}
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b02a      	add	sp, #168	; 0xa8
 8002db2:	bdb0      	pop	{r4, r5, r7, pc}
 8002db4:	fffffeff 	.word	0xfffffeff
 8002db8:	fffffedf 	.word	0xfffffedf
 8002dbc:	effffffe 	.word	0xeffffffe

08002dc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	000a      	movs	r2, r1
 8002dfa:	1cbb      	adds	r3, r7, #2
 8002dfc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b002      	add	sp, #8
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b090      	sub	sp, #64	; 0x40
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e10:	231a      	movs	r3, #26
 8002e12:	2220      	movs	r2, #32
 8002e14:	189b      	adds	r3, r3, r2
 8002e16:	19db      	adds	r3, r3, r7
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4aaf      	ldr	r2, [pc, #700]	; (80030f8 <UART_SetConfig+0x2f0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e46:	430b      	orrs	r3, r1
 8002e48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4aaa      	ldr	r2, [pc, #680]	; (80030fc <UART_SetConfig+0x2f4>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0018      	movs	r0, r3
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	68d9      	ldr	r1, [r3, #12]
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	0003      	movs	r3, r0
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4aa4      	ldr	r2, [pc, #656]	; (8003100 <UART_SetConfig+0x2f8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a9f      	ldr	r2, [pc, #636]	; (8003104 <UART_SetConfig+0x2fc>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	220f      	movs	r2, #15
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a95      	ldr	r2, [pc, #596]	; (8003108 <UART_SetConfig+0x300>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d131      	bne.n	8002f1c <UART_SetConfig+0x114>
 8002eb8:	4b94      	ldr	r3, [pc, #592]	; (800310c <UART_SetConfig+0x304>)
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d01d      	beq.n	8002f00 <UART_SetConfig+0xf8>
 8002ec4:	d823      	bhi.n	8002f0e <UART_SetConfig+0x106>
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d00c      	beq.n	8002ee4 <UART_SetConfig+0xdc>
 8002eca:	d820      	bhi.n	8002f0e <UART_SetConfig+0x106>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <UART_SetConfig+0xce>
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d00e      	beq.n	8002ef2 <UART_SetConfig+0xea>
 8002ed4:	e01b      	b.n	8002f0e <UART_SetConfig+0x106>
 8002ed6:	231b      	movs	r3, #27
 8002ed8:	2220      	movs	r2, #32
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	19db      	adds	r3, r3, r7
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e0b4      	b.n	800304e <UART_SetConfig+0x246>
 8002ee4:	231b      	movs	r3, #27
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	189b      	adds	r3, r3, r2
 8002eea:	19db      	adds	r3, r3, r7
 8002eec:	2202      	movs	r2, #2
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e0ad      	b.n	800304e <UART_SetConfig+0x246>
 8002ef2:	231b      	movs	r3, #27
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	19db      	adds	r3, r3, r7
 8002efa:	2204      	movs	r2, #4
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e0a6      	b.n	800304e <UART_SetConfig+0x246>
 8002f00:	231b      	movs	r3, #27
 8002f02:	2220      	movs	r2, #32
 8002f04:	189b      	adds	r3, r3, r2
 8002f06:	19db      	adds	r3, r3, r7
 8002f08:	2208      	movs	r2, #8
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e09f      	b.n	800304e <UART_SetConfig+0x246>
 8002f0e:	231b      	movs	r3, #27
 8002f10:	2220      	movs	r2, #32
 8002f12:	189b      	adds	r3, r3, r2
 8002f14:	19db      	adds	r3, r3, r7
 8002f16:	2210      	movs	r2, #16
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e098      	b.n	800304e <UART_SetConfig+0x246>
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a7b      	ldr	r2, [pc, #492]	; (8003110 <UART_SetConfig+0x308>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d131      	bne.n	8002f8a <UART_SetConfig+0x182>
 8002f26:	4b79      	ldr	r3, [pc, #484]	; (800310c <UART_SetConfig+0x304>)
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d01d      	beq.n	8002f6e <UART_SetConfig+0x166>
 8002f32:	d823      	bhi.n	8002f7c <UART_SetConfig+0x174>
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d00c      	beq.n	8002f52 <UART_SetConfig+0x14a>
 8002f38:	d820      	bhi.n	8002f7c <UART_SetConfig+0x174>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <UART_SetConfig+0x13c>
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d00e      	beq.n	8002f60 <UART_SetConfig+0x158>
 8002f42:	e01b      	b.n	8002f7c <UART_SetConfig+0x174>
 8002f44:	231b      	movs	r3, #27
 8002f46:	2220      	movs	r2, #32
 8002f48:	189b      	adds	r3, r3, r2
 8002f4a:	19db      	adds	r3, r3, r7
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e07d      	b.n	800304e <UART_SetConfig+0x246>
 8002f52:	231b      	movs	r3, #27
 8002f54:	2220      	movs	r2, #32
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	19db      	adds	r3, r3, r7
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e076      	b.n	800304e <UART_SetConfig+0x246>
 8002f60:	231b      	movs	r3, #27
 8002f62:	2220      	movs	r2, #32
 8002f64:	189b      	adds	r3, r3, r2
 8002f66:	19db      	adds	r3, r3, r7
 8002f68:	2204      	movs	r2, #4
 8002f6a:	701a      	strb	r2, [r3, #0]
 8002f6c:	e06f      	b.n	800304e <UART_SetConfig+0x246>
 8002f6e:	231b      	movs	r3, #27
 8002f70:	2220      	movs	r2, #32
 8002f72:	189b      	adds	r3, r3, r2
 8002f74:	19db      	adds	r3, r3, r7
 8002f76:	2208      	movs	r2, #8
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e068      	b.n	800304e <UART_SetConfig+0x246>
 8002f7c:	231b      	movs	r3, #27
 8002f7e:	2220      	movs	r2, #32
 8002f80:	189b      	adds	r3, r3, r2
 8002f82:	19db      	adds	r3, r3, r7
 8002f84:	2210      	movs	r2, #16
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e061      	b.n	800304e <UART_SetConfig+0x246>
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a61      	ldr	r2, [pc, #388]	; (8003114 <UART_SetConfig+0x30c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d106      	bne.n	8002fa2 <UART_SetConfig+0x19a>
 8002f94:	231b      	movs	r3, #27
 8002f96:	2220      	movs	r2, #32
 8002f98:	189b      	adds	r3, r3, r2
 8002f9a:	19db      	adds	r3, r3, r7
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e055      	b.n	800304e <UART_SetConfig+0x246>
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a5c      	ldr	r2, [pc, #368]	; (8003118 <UART_SetConfig+0x310>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d106      	bne.n	8002fba <UART_SetConfig+0x1b2>
 8002fac:	231b      	movs	r3, #27
 8002fae:	2220      	movs	r2, #32
 8002fb0:	189b      	adds	r3, r3, r2
 8002fb2:	19db      	adds	r3, r3, r7
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
 8002fb8:	e049      	b.n	800304e <UART_SetConfig+0x246>
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a50      	ldr	r2, [pc, #320]	; (8003100 <UART_SetConfig+0x2f8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d13e      	bne.n	8003042 <UART_SetConfig+0x23a>
 8002fc4:	4b51      	ldr	r3, [pc, #324]	; (800310c <UART_SetConfig+0x304>)
 8002fc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fc8:	23c0      	movs	r3, #192	; 0xc0
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	4013      	ands	r3, r2
 8002fce:	22c0      	movs	r2, #192	; 0xc0
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d027      	beq.n	8003026 <UART_SetConfig+0x21e>
 8002fd6:	22c0      	movs	r2, #192	; 0xc0
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d82a      	bhi.n	8003034 <UART_SetConfig+0x22c>
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d011      	beq.n	800300a <UART_SetConfig+0x202>
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d822      	bhi.n	8003034 <UART_SetConfig+0x22c>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <UART_SetConfig+0x1f4>
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	00d2      	lsls	r2, r2, #3
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <UART_SetConfig+0x210>
 8002ffa:	e01b      	b.n	8003034 <UART_SetConfig+0x22c>
 8002ffc:	231b      	movs	r3, #27
 8002ffe:	2220      	movs	r2, #32
 8003000:	189b      	adds	r3, r3, r2
 8003002:	19db      	adds	r3, r3, r7
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e021      	b.n	800304e <UART_SetConfig+0x246>
 800300a:	231b      	movs	r3, #27
 800300c:	2220      	movs	r2, #32
 800300e:	189b      	adds	r3, r3, r2
 8003010:	19db      	adds	r3, r3, r7
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e01a      	b.n	800304e <UART_SetConfig+0x246>
 8003018:	231b      	movs	r3, #27
 800301a:	2220      	movs	r2, #32
 800301c:	189b      	adds	r3, r3, r2
 800301e:	19db      	adds	r3, r3, r7
 8003020:	2204      	movs	r2, #4
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e013      	b.n	800304e <UART_SetConfig+0x246>
 8003026:	231b      	movs	r3, #27
 8003028:	2220      	movs	r2, #32
 800302a:	189b      	adds	r3, r3, r2
 800302c:	19db      	adds	r3, r3, r7
 800302e:	2208      	movs	r2, #8
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e00c      	b.n	800304e <UART_SetConfig+0x246>
 8003034:	231b      	movs	r3, #27
 8003036:	2220      	movs	r2, #32
 8003038:	189b      	adds	r3, r3, r2
 800303a:	19db      	adds	r3, r3, r7
 800303c:	2210      	movs	r2, #16
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e005      	b.n	800304e <UART_SetConfig+0x246>
 8003042:	231b      	movs	r3, #27
 8003044:	2220      	movs	r2, #32
 8003046:	189b      	adds	r3, r3, r2
 8003048:	19db      	adds	r3, r3, r7
 800304a:	2210      	movs	r2, #16
 800304c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2b      	ldr	r2, [pc, #172]	; (8003100 <UART_SetConfig+0x2f8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d000      	beq.n	800305a <UART_SetConfig+0x252>
 8003058:	e0a9      	b.n	80031ae <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800305a:	231b      	movs	r3, #27
 800305c:	2220      	movs	r2, #32
 800305e:	189b      	adds	r3, r3, r2
 8003060:	19db      	adds	r3, r3, r7
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d015      	beq.n	8003094 <UART_SetConfig+0x28c>
 8003068:	dc18      	bgt.n	800309c <UART_SetConfig+0x294>
 800306a:	2b04      	cmp	r3, #4
 800306c:	d00d      	beq.n	800308a <UART_SetConfig+0x282>
 800306e:	dc15      	bgt.n	800309c <UART_SetConfig+0x294>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <UART_SetConfig+0x272>
 8003074:	2b02      	cmp	r3, #2
 8003076:	d005      	beq.n	8003084 <UART_SetConfig+0x27c>
 8003078:	e010      	b.n	800309c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800307a:	f7ff f855 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 800307e:	0003      	movs	r3, r0
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003082:	e014      	b.n	80030ae <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <UART_SetConfig+0x314>)
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003088:	e011      	b.n	80030ae <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308a:	f7fe ffc1 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 800308e:	0003      	movs	r3, r0
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003092:	e00c      	b.n	80030ae <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800309a:	e008      	b.n	80030ae <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80030a0:	231a      	movs	r3, #26
 80030a2:	2220      	movs	r2, #32
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	19db      	adds	r3, r3, r7
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
        break;
 80030ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d100      	bne.n	80030b6 <UART_SetConfig+0x2ae>
 80030b4:	e14b      	b.n	800334e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <UART_SetConfig+0x318>)
 80030bc:	0052      	lsls	r2, r2, #1
 80030be:	5ad3      	ldrh	r3, [r2, r3]
 80030c0:	0019      	movs	r1, r3
 80030c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030c4:	f7fd f81e 	bl	8000104 <__udivsi3>
 80030c8:	0003      	movs	r3, r0
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	0013      	movs	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d8:	429a      	cmp	r2, r3
 80030da:	d305      	bcc.n	80030e8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d91d      	bls.n	8003124 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80030e8:	231a      	movs	r3, #26
 80030ea:	2220      	movs	r2, #32
 80030ec:	189b      	adds	r3, r3, r2
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e12b      	b.n	800334e <UART_SetConfig+0x546>
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	cfff69f3 	.word	0xcfff69f3
 80030fc:	ffffcfff 	.word	0xffffcfff
 8003100:	40008000 	.word	0x40008000
 8003104:	11fff4ff 	.word	0x11fff4ff
 8003108:	40013800 	.word	0x40013800
 800310c:	40021000 	.word	0x40021000
 8003110:	40004400 	.word	0x40004400
 8003114:	40004800 	.word	0x40004800
 8003118:	40004c00 	.word	0x40004c00
 800311c:	00f42400 	.word	0x00f42400
 8003120:	08003f6c 	.word	0x08003f6c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003130:	4b92      	ldr	r3, [pc, #584]	; (800337c <UART_SetConfig+0x574>)
 8003132:	0052      	lsls	r2, r2, #1
 8003134:	5ad3      	ldrh	r3, [r2, r3]
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	69b8      	ldr	r0, [r7, #24]
 8003142:	69f9      	ldr	r1, [r7, #28]
 8003144:	f7fd f954 	bl	80003f0 <__aeabi_uldivmod>
 8003148:	0002      	movs	r2, r0
 800314a:	000b      	movs	r3, r1
 800314c:	0e11      	lsrs	r1, r2, #24
 800314e:	021d      	lsls	r5, r3, #8
 8003150:	430d      	orrs	r5, r1
 8003152:	0214      	lsls	r4, r2, #8
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68b8      	ldr	r0, [r7, #8]
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	1900      	adds	r0, r0, r4
 8003166:	4169      	adcs	r1, r5
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f7fd f93b 	bl	80003f0 <__aeabi_uldivmod>
 800317a:	0002      	movs	r2, r0
 800317c:	000b      	movs	r3, r1
 800317e:	0013      	movs	r3, r2
 8003180:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003184:	23c0      	movs	r3, #192	; 0xc0
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d309      	bcc.n	80031a0 <UART_SetConfig+0x398>
 800318c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	035b      	lsls	r3, r3, #13
 8003192:	429a      	cmp	r2, r3
 8003194:	d204      	bcs.n	80031a0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	e0d6      	b.n	800334e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80031a0:	231a      	movs	r3, #26
 80031a2:	2220      	movs	r2, #32
 80031a4:	189b      	adds	r3, r3, r2
 80031a6:	19db      	adds	r3, r3, r7
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e0cf      	b.n	800334e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d000      	beq.n	80031bc <UART_SetConfig+0x3b4>
 80031ba:	e070      	b.n	800329e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80031bc:	231b      	movs	r3, #27
 80031be:	2220      	movs	r2, #32
 80031c0:	189b      	adds	r3, r3, r2
 80031c2:	19db      	adds	r3, r3, r7
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d015      	beq.n	80031f6 <UART_SetConfig+0x3ee>
 80031ca:	dc18      	bgt.n	80031fe <UART_SetConfig+0x3f6>
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d00d      	beq.n	80031ec <UART_SetConfig+0x3e4>
 80031d0:	dc15      	bgt.n	80031fe <UART_SetConfig+0x3f6>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <UART_SetConfig+0x3d4>
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d005      	beq.n	80031e6 <UART_SetConfig+0x3de>
 80031da:	e010      	b.n	80031fe <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031dc:	f7fe ffa4 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 80031e0:	0003      	movs	r3, r0
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031e4:	e014      	b.n	8003210 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e6:	4b66      	ldr	r3, [pc, #408]	; (8003380 <UART_SetConfig+0x578>)
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031ea:	e011      	b.n	8003210 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ec:	f7fe ff10 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 80031f0:	0003      	movs	r3, r0
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031f4:	e00c      	b.n	8003210 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031fc:	e008      	b.n	8003210 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003202:	231a      	movs	r3, #26
 8003204:	2220      	movs	r2, #32
 8003206:	189b      	adds	r3, r3, r2
 8003208:	19db      	adds	r3, r3, r7
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
        break;
 800320e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	2b00      	cmp	r3, #0
 8003214:	d100      	bne.n	8003218 <UART_SetConfig+0x410>
 8003216:	e09a      	b.n	800334e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321c:	4b57      	ldr	r3, [pc, #348]	; (800337c <UART_SetConfig+0x574>)
 800321e:	0052      	lsls	r2, r2, #1
 8003220:	5ad3      	ldrh	r3, [r2, r3]
 8003222:	0019      	movs	r1, r3
 8003224:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003226:	f7fc ff6d 	bl	8000104 <__udivsi3>
 800322a:	0003      	movs	r3, r0
 800322c:	005a      	lsls	r2, r3, #1
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	18d2      	adds	r2, r2, r3
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0019      	movs	r1, r3
 800323c:	0010      	movs	r0, r2
 800323e:	f7fc ff61 	bl	8000104 <__udivsi3>
 8003242:	0003      	movs	r3, r0
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d921      	bls.n	8003290 <UART_SetConfig+0x488>
 800324c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	025b      	lsls	r3, r3, #9
 8003252:	429a      	cmp	r2, r3
 8003254:	d21c      	bcs.n	8003290 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	b29a      	uxth	r2, r3
 800325a:	200e      	movs	r0, #14
 800325c:	2420      	movs	r4, #32
 800325e:	1903      	adds	r3, r0, r4
 8003260:	19db      	adds	r3, r3, r7
 8003262:	210f      	movs	r1, #15
 8003264:	438a      	bics	r2, r1
 8003266:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	b29b      	uxth	r3, r3
 800326e:	2207      	movs	r2, #7
 8003270:	4013      	ands	r3, r2
 8003272:	b299      	uxth	r1, r3
 8003274:	1903      	adds	r3, r0, r4
 8003276:	19db      	adds	r3, r3, r7
 8003278:	1902      	adds	r2, r0, r4
 800327a:	19d2      	adds	r2, r2, r7
 800327c:	8812      	ldrh	r2, [r2, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	1902      	adds	r2, r0, r4
 8003288:	19d2      	adds	r2, r2, r7
 800328a:	8812      	ldrh	r2, [r2, #0]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	e05e      	b.n	800334e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003290:	231a      	movs	r3, #26
 8003292:	2220      	movs	r2, #32
 8003294:	189b      	adds	r3, r3, r2
 8003296:	19db      	adds	r3, r3, r7
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e057      	b.n	800334e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800329e:	231b      	movs	r3, #27
 80032a0:	2220      	movs	r2, #32
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	19db      	adds	r3, r3, r7
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d015      	beq.n	80032d8 <UART_SetConfig+0x4d0>
 80032ac:	dc18      	bgt.n	80032e0 <UART_SetConfig+0x4d8>
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d00d      	beq.n	80032ce <UART_SetConfig+0x4c6>
 80032b2:	dc15      	bgt.n	80032e0 <UART_SetConfig+0x4d8>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <UART_SetConfig+0x4b6>
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d005      	beq.n	80032c8 <UART_SetConfig+0x4c0>
 80032bc:	e010      	b.n	80032e0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032be:	f7fe ff33 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 80032c2:	0003      	movs	r3, r0
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032c6:	e014      	b.n	80032f2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <UART_SetConfig+0x578>)
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032cc:	e011      	b.n	80032f2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ce:	f7fe fe9f 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 80032d2:	0003      	movs	r3, r0
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032d6:	e00c      	b.n	80032f2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032de:	e008      	b.n	80032f2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80032e4:	231a      	movs	r3, #26
 80032e6:	2220      	movs	r2, #32
 80032e8:	189b      	adds	r3, r3, r2
 80032ea:	19db      	adds	r3, r3, r7
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
        break;
 80032f0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02a      	beq.n	800334e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032fc:	4b1f      	ldr	r3, [pc, #124]	; (800337c <UART_SetConfig+0x574>)
 80032fe:	0052      	lsls	r2, r2, #1
 8003300:	5ad3      	ldrh	r3, [r2, r3]
 8003302:	0019      	movs	r1, r3
 8003304:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003306:	f7fc fefd 	bl	8000104 <__udivsi3>
 800330a:	0003      	movs	r3, r0
 800330c:	001a      	movs	r2, r3
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	18d2      	adds	r2, r2, r3
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	0019      	movs	r1, r3
 800331c:	0010      	movs	r0, r2
 800331e:	f7fc fef1 	bl	8000104 <__udivsi3>
 8003322:	0003      	movs	r3, r0
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	2b0f      	cmp	r3, #15
 800332a:	d90a      	bls.n	8003342 <UART_SetConfig+0x53a>
 800332c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	025b      	lsls	r3, r3, #9
 8003332:	429a      	cmp	r2, r3
 8003334:	d205      	bcs.n	8003342 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	b29a      	uxth	r2, r3
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	e005      	b.n	800334e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003342:	231a      	movs	r3, #26
 8003344:	2220      	movs	r2, #32
 8003346:	189b      	adds	r3, r3, r2
 8003348:	19db      	adds	r3, r3, r7
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	226a      	movs	r2, #106	; 0x6a
 8003352:	2101      	movs	r1, #1
 8003354:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	2268      	movs	r2, #104	; 0x68
 800335a:	2101      	movs	r1, #1
 800335c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	2200      	movs	r2, #0
 8003362:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	2200      	movs	r2, #0
 8003368:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800336a:	231a      	movs	r3, #26
 800336c:	2220      	movs	r2, #32
 800336e:	189b      	adds	r3, r3, r2
 8003370:	19db      	adds	r3, r3, r7
 8003372:	781b      	ldrb	r3, [r3, #0]
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b010      	add	sp, #64	; 0x40
 800337a:	bdb0      	pop	{r4, r5, r7, pc}
 800337c:	08003f6c 	.word	0x08003f6c
 8003380:	00f42400 	.word	0x00f42400

08003384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2208      	movs	r2, #8
 8003392:	4013      	ands	r3, r2
 8003394:	d00b      	beq.n	80033ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a4a      	ldr	r2, [pc, #296]	; (80034c8 <UART_AdvFeatureConfig+0x144>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	2201      	movs	r2, #1
 80033b4:	4013      	ands	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a43      	ldr	r2, [pc, #268]	; (80034cc <UART_AdvFeatureConfig+0x148>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	2202      	movs	r2, #2
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <UART_AdvFeatureConfig+0x14c>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	2204      	movs	r2, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00b      	beq.n	8003414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <UART_AdvFeatureConfig+0x150>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	2210      	movs	r2, #16
 800341a:	4013      	ands	r3, r2
 800341c:	d00b      	beq.n	8003436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <UART_AdvFeatureConfig+0x154>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	2220      	movs	r2, #32
 800343c:	4013      	ands	r3, r2
 800343e:	d00b      	beq.n	8003458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <UART_AdvFeatureConfig+0x158>)
 8003448:	4013      	ands	r3, r2
 800344a:	0019      	movs	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	2240      	movs	r2, #64	; 0x40
 800345e:	4013      	ands	r3, r2
 8003460:	d01d      	beq.n	800349e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <UART_AdvFeatureConfig+0x15c>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	035b      	lsls	r3, r3, #13
 8003482:	429a      	cmp	r2, r3
 8003484:	d10b      	bne.n	800349e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <UART_AdvFeatureConfig+0x160>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <UART_AdvFeatureConfig+0x164>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	ffff7fff 	.word	0xffff7fff
 80034cc:	fffdffff 	.word	0xfffdffff
 80034d0:	fffeffff 	.word	0xfffeffff
 80034d4:	fffbffff 	.word	0xfffbffff
 80034d8:	ffffefff 	.word	0xffffefff
 80034dc:	ffffdfff 	.word	0xffffdfff
 80034e0:	ffefffff 	.word	0xffefffff
 80034e4:	ff9fffff 	.word	0xff9fffff
 80034e8:	fff7ffff 	.word	0xfff7ffff

080034ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b092      	sub	sp, #72	; 0x48
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2290      	movs	r2, #144	; 0x90
 80034f8:	2100      	movs	r1, #0
 80034fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034fc:	f7fd fb92 	bl	8000c24 <HAL_GetTick>
 8003500:	0003      	movs	r3, r0
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2208      	movs	r2, #8
 800350c:	4013      	ands	r3, r2
 800350e:	2b08      	cmp	r3, #8
 8003510:	d12d      	bne.n	800356e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	0391      	lsls	r1, r2, #14
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4a47      	ldr	r2, [pc, #284]	; (8003638 <UART_CheckIdleState+0x14c>)
 800351c:	9200      	str	r2, [sp, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	f000 f88e 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d022      	beq.n	800356e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
 8003532:	2301      	movs	r3, #1
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2180      	movs	r1, #128	; 0x80
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2288      	movs	r2, #136	; 0x88
 800355e:	2120      	movs	r1, #32
 8003560:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2284      	movs	r2, #132	; 0x84
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e060      	b.n	8003630 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2204      	movs	r2, #4
 8003576:	4013      	ands	r3, r2
 8003578:	2b04      	cmp	r3, #4
 800357a:	d146      	bne.n	800360a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	03d1      	lsls	r1, r2, #15
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <UART_CheckIdleState+0x14c>)
 8003586:	9200      	str	r2, [sp, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	f000 f859 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d03b      	beq.n	800360a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003592:	f3ef 8310 	mrs	r3, PRIMASK
 8003596:	60fb      	str	r3, [r7, #12]
  return(result);
 8003598:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
 800359c:	2301      	movs	r3, #1
 800359e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f383 8810 	msr	PRIMASK, r3
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4922      	ldr	r1, [pc, #136]	; (800363c <UART_CheckIdleState+0x150>)
 80035b4:	400a      	ands	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f383 8810 	msr	PRIMASK, r3
}
 80035c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c4:	f3ef 8310 	mrs	r3, PRIMASK
 80035c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80035ca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f383 8810 	msr	PRIMASK, r3
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	438a      	bics	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f383 8810 	msr	PRIMASK, r3
}
 80035f4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	228c      	movs	r2, #140	; 0x8c
 80035fa:	2120      	movs	r1, #32
 80035fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2284      	movs	r2, #132	; 0x84
 8003602:	2100      	movs	r1, #0
 8003604:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e012      	b.n	8003630 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2288      	movs	r2, #136	; 0x88
 800360e:	2120      	movs	r1, #32
 8003610:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	228c      	movs	r2, #140	; 0x8c
 8003616:	2120      	movs	r1, #32
 8003618:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2284      	movs	r2, #132	; 0x84
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b010      	add	sp, #64	; 0x40
 8003636:	bd80      	pop	{r7, pc}
 8003638:	01ffffff 	.word	0x01ffffff
 800363c:	fffffedf 	.word	0xfffffedf

08003640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	1dfb      	adds	r3, r7, #7
 800364e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003650:	e051      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	3301      	adds	r3, #1
 8003656:	d04e      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003658:	f7fd fae4 	bl	8000c24 <HAL_GetTick>
 800365c:	0002      	movs	r2, r0
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e051      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2204      	movs	r2, #4
 800367a:	4013      	ands	r3, r2
 800367c:	d03b      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b80      	cmp	r3, #128	; 0x80
 8003682:	d038      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b40      	cmp	r3, #64	; 0x40
 8003688:	d035      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	2208      	movs	r2, #8
 8003692:	4013      	ands	r3, r2
 8003694:	2b08      	cmp	r3, #8
 8003696:	d111      	bne.n	80036bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2208      	movs	r2, #8
 800369e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 f922 	bl	80038ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2290      	movs	r2, #144	; 0x90
 80036ac:	2108      	movs	r1, #8
 80036ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2284      	movs	r2, #132	; 0x84
 80036b4:	2100      	movs	r1, #0
 80036b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e02c      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	401a      	ands	r2, r3
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d112      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2280      	movs	r2, #128	; 0x80
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f905 	bl	80038ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2290      	movs	r2, #144	; 0x90
 80036e6:	2120      	movs	r1, #32
 80036e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2284      	movs	r2, #132	; 0x84
 80036ee:	2100      	movs	r1, #0
 80036f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e00f      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	425a      	negs	r2, r3
 8003706:	4153      	adcs	r3, r2
 8003708:	b2db      	uxtb	r3, r3
 800370a:	001a      	movs	r2, r3
 800370c:	1dfb      	adds	r3, r7, #7
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d09e      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b090      	sub	sp, #64	; 0x40
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	1dbb      	adds	r3, r7, #6
 800372c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1dba      	adds	r2, r7, #6
 8003738:	215c      	movs	r1, #92	; 0x5c
 800373a:	8812      	ldrh	r2, [r2, #0]
 800373c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2290      	movs	r2, #144	; 0x90
 8003742:	2100      	movs	r1, #0
 8003744:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	228c      	movs	r2, #140	; 0x8c
 800374a:	2122      	movs	r1, #34	; 0x22
 800374c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	589b      	ldr	r3, [r3, r2]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d02d      	beq.n	80037b4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	589b      	ldr	r3, [r3, r2]
 800375e:	4a40      	ldr	r2, [pc, #256]	; (8003860 <UART_Start_Receive_DMA+0x140>)
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	589b      	ldr	r3, [r3, r2]
 8003768:	4a3e      	ldr	r2, [pc, #248]	; (8003864 <UART_Start_Receive_DMA+0x144>)
 800376a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	589b      	ldr	r3, [r3, r2]
 8003772:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <UART_Start_Receive_DMA+0x148>)
 8003774:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	589b      	ldr	r3, [r3, r2]
 800377c:	2200      	movs	r2, #0
 800377e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	5898      	ldr	r0, [r3, r2]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3324      	adds	r3, #36	; 0x24
 800378c:	0019      	movs	r1, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	001a      	movs	r2, r3
 8003794:	1dbb      	adds	r3, r7, #6
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	f7fd fbb6 	bl	8000f08 <HAL_DMA_Start_IT>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d009      	beq.n	80037b4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2290      	movs	r2, #144	; 0x90
 80037a4:	2110      	movs	r1, #16
 80037a6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	228c      	movs	r2, #140	; 0x8c
 80037ac:	2120      	movs	r1, #32
 80037ae:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e050      	b.n	8003856 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d019      	beq.n	80037f0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037bc:	f3ef 8310 	mrs	r3, PRIMASK
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c6:	2301      	movs	r3, #1
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	f383 8810 	msr	PRIMASK, r3
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2180      	movs	r1, #128	; 0x80
 80037de:	0049      	lsls	r1, r1, #1
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f0:	f3ef 8310 	mrs	r3, PRIMASK
 80037f4:	613b      	str	r3, [r7, #16]
  return(result);
 80037f6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80037fa:	2301      	movs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2101      	movs	r1, #1
 8003812:	430a      	orrs	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003818:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003822:	f3ef 8310 	mrs	r3, PRIMASK
 8003826:	61fb      	str	r3, [r7, #28]
  return(result);
 8003828:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	637b      	str	r3, [r7, #52]	; 0x34
 800382c:	2301      	movs	r3, #1
 800382e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f383 8810 	msr	PRIMASK, r3
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	430a      	orrs	r2, r1
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f383 8810 	msr	PRIMASK, r3
}
 8003852:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b010      	add	sp, #64	; 0x40
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	080039b9 	.word	0x080039b9
 8003864:	08003ae9 	.word	0x08003ae9
 8003868:	08003b2b 	.word	0x08003b2b

0800386c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003874:	f3ef 8310 	mrs	r3, PRIMASK
 8003878:	60bb      	str	r3, [r7, #8]
  return(result);
 800387a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	2301      	movs	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f383 8810 	msr	PRIMASK, r3
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	21c0      	movs	r1, #192	; 0xc0
 8003896:	438a      	bics	r2, r1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f383 8810 	msr	PRIMASK, r3
}
 80038a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a6:	f3ef 8310 	mrs	r3, PRIMASK
 80038aa:	617b      	str	r3, [r7, #20]
  return(result);
 80038ac:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80038ae:	623b      	str	r3, [r7, #32]
 80038b0:	2301      	movs	r3, #1
 80038b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f383 8810 	msr	PRIMASK, r3
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <UART_EndTxTransfer+0x7c>)
 80038c8:	400a      	ands	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f383 8810 	msr	PRIMASK, r3
}
 80038d6:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2288      	movs	r2, #136	; 0x88
 80038dc:	2120      	movs	r1, #32
 80038de:	5099      	str	r1, [r3, r2]
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b00a      	add	sp, #40	; 0x28
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	ff7fffff 	.word	0xff7fffff

080038ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08e      	sub	sp, #56	; 0x38
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8310 	mrs	r3, PRIMASK
 80038f8:	617b      	str	r3, [r7, #20]
  return(result);
 80038fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4926      	ldr	r1, [pc, #152]	; (80039b0 <UART_EndRxTransfer+0xc4>)
 8003916:	400a      	ands	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f383 8810 	msr	PRIMASK, r3
}
 8003924:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003926:	f3ef 8310 	mrs	r3, PRIMASK
 800392a:	623b      	str	r3, [r7, #32]
  return(result);
 800392c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800392e:	633b      	str	r3, [r7, #48]	; 0x30
 8003930:	2301      	movs	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	491b      	ldr	r1, [pc, #108]	; (80039b4 <UART_EndRxTransfer+0xc8>)
 8003948:	400a      	ands	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	f383 8810 	msr	PRIMASK, r3
}
 8003956:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d118      	bne.n	8003992 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003960:	f3ef 8310 	mrs	r3, PRIMASK
 8003964:	60bb      	str	r3, [r7, #8]
  return(result);
 8003966:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396a:	2301      	movs	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2110      	movs	r1, #16
 8003982:	438a      	bics	r2, r1
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f383 8810 	msr	PRIMASK, r3
}
 8003990:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	228c      	movs	r2, #140	; 0x8c
 8003996:	2120      	movs	r1, #32
 8003998:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b00e      	add	sp, #56	; 0x38
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	fffffedf 	.word	0xfffffedf
 80039b4:	effffffe 	.word	0xeffffffe

080039b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b094      	sub	sp, #80	; 0x50
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2220      	movs	r2, #32
 80039ce:	4013      	ands	r3, r2
 80039d0:	d16f      	bne.n	8003ab2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80039d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d4:	225e      	movs	r2, #94	; 0x5e
 80039d6:	2100      	movs	r1, #0
 80039d8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039da:	f3ef 8310 	mrs	r3, PRIMASK
 80039de:	61bb      	str	r3, [r7, #24]
  return(result);
 80039e0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e4:	2301      	movs	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f383 8810 	msr	PRIMASK, r3
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	493a      	ldr	r1, [pc, #232]	; (8003ae4 <UART_DMAReceiveCplt+0x12c>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
 8003a16:	2301      	movs	r3, #1
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	f383 8810 	msr	PRIMASK, r3
}
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	438a      	bics	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]
 8003a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	f383 8810 	msr	PRIMASK, r3
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
 8003a48:	2301      	movs	r3, #1
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2140      	movs	r1, #64	; 0x40
 8003a60:	438a      	bics	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	f383 8810 	msr	PRIMASK, r3
}
 8003a6e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a72:	228c      	movs	r2, #140	; 0x8c
 8003a74:	2120      	movs	r1, #32
 8003a76:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d118      	bne.n	8003ab2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a80:	f3ef 8310 	mrs	r3, PRIMASK
 8003a84:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a86:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f383 8810 	msr	PRIMASK, r3
}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2110      	movs	r1, #16
 8003aa2:	438a      	bics	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f383 8810 	msr	PRIMASK, r3
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d108      	bne.n	8003ad2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac2:	225c      	movs	r2, #92	; 0x5c
 8003ac4:	5a9a      	ldrh	r2, [r3, r2]
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	0011      	movs	r1, r2
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7ff f990 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ad0:	e003      	b.n	8003ada <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7fc fea3 	bl	8000820 <HAL_UART_RxCpltCallback>
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b014      	add	sp, #80	; 0x50
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	fffffeff 	.word	0xfffffeff

08003ae8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10a      	bne.n	8003b1a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	225c      	movs	r2, #92	; 0x5c
 8003b08:	5a9b      	ldrh	r3, [r3, r2]
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	0011      	movs	r1, r2
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7ff f96c 	bl	8002df0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b18:	e003      	b.n	8003b22 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff f957 	bl	8002dd0 <HAL_UART_RxHalfCpltCallback>
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b004      	add	sp, #16
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2288      	movs	r2, #136	; 0x88
 8003b3c:	589b      	ldr	r3, [r3, r2]
 8003b3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	228c      	movs	r2, #140	; 0x8c
 8003b44:	589b      	ldr	r3, [r3, r2]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b80      	cmp	r3, #128	; 0x80
 8003b54:	d10a      	bne.n	8003b6c <UART_DMAError+0x42>
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b21      	cmp	r3, #33	; 0x21
 8003b5a:	d107      	bne.n	8003b6c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2256      	movs	r2, #86	; 0x56
 8003b60:	2100      	movs	r1, #0
 8003b62:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7ff fe80 	bl	800386c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d10a      	bne.n	8003b90 <UART_DMAError+0x66>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b22      	cmp	r3, #34	; 0x22
 8003b7e:	d107      	bne.n	8003b90 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	225e      	movs	r2, #94	; 0x5e
 8003b84:	2100      	movs	r1, #0
 8003b86:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7ff feae 	bl	80038ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2290      	movs	r2, #144	; 0x90
 8003b94:	589b      	ldr	r3, [r3, r2]
 8003b96:	2210      	movs	r2, #16
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2190      	movs	r1, #144	; 0x90
 8003b9e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f7ff f91c 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b006      	add	sp, #24
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	225e      	movs	r2, #94	; 0x5e
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2256      	movs	r2, #86	; 0x56
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff f905 	bl	8002de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	438a      	bics	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f383 8810 	msr	PRIMASK, r3
}
 8003c16:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2288      	movs	r2, #136	; 0x88
 8003c1c:	2120      	movs	r1, #32
 8003c1e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7ff f8c9 	bl	8002dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b006      	add	sp, #24
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b002      	add	sp, #8
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b002      	add	sp, #8
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b002      	add	sp, #8
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2284      	movs	r2, #132	; 0x84
 8003c74:	5c9b      	ldrb	r3, [r3, r2]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_UARTEx_DisableFifoMode+0x16>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e027      	b.n	8003cce <HAL_UARTEx_DisableFifoMode+0x66>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2284      	movs	r2, #132	; 0x84
 8003c82:	2101      	movs	r1, #1
 8003c84:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2288      	movs	r2, #136	; 0x88
 8003c8a:	2124      	movs	r1, #36	; 0x24
 8003c8c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	438a      	bics	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a0b      	ldr	r2, [pc, #44]	; (8003cd8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2288      	movs	r2, #136	; 0x88
 8003cc0:	2120      	movs	r1, #32
 8003cc2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2284      	movs	r2, #132	; 0x84
 8003cc8:	2100      	movs	r1, #0
 8003cca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b004      	add	sp, #16
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	dfffffff 	.word	0xdfffffff

08003cdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2284      	movs	r2, #132	; 0x84
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e02e      	b.n	8003d52 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2284      	movs	r2, #132	; 0x84
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2288      	movs	r2, #136	; 0x88
 8003d00:	2124      	movs	r1, #36	; 0x24
 8003d02:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	438a      	bics	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	08d9      	lsrs	r1, r3, #3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f000 f854 	bl	8003de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2288      	movs	r2, #136	; 0x88
 8003d44:	2120      	movs	r1, #32
 8003d46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2284      	movs	r2, #132	; 0x84
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	0018      	movs	r0, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b004      	add	sp, #16
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2284      	movs	r2, #132	; 0x84
 8003d6a:	5c9b      	ldrb	r3, [r3, r2]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e02f      	b.n	8003dd4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2284      	movs	r2, #132	; 0x84
 8003d78:	2101      	movs	r1, #1
 8003d7a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2288      	movs	r2, #136	; 0x88
 8003d80:	2124      	movs	r1, #36	; 0x24
 8003d82:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2101      	movs	r1, #1
 8003d98:	438a      	bics	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	0019      	movs	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	0018      	movs	r0, r3
 8003db6:	f000 f813 	bl	8003de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2288      	movs	r2, #136	; 0x88
 8003dc6:	2120      	movs	r1, #32
 8003dc8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2284      	movs	r2, #132	; 0x84
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	f1ffffff 	.word	0xf1ffffff

08003de0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d108      	bne.n	8003e02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	226a      	movs	r2, #106	; 0x6a
 8003df4:	2101      	movs	r1, #1
 8003df6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2268      	movs	r2, #104	; 0x68
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e00:	e043      	b.n	8003e8a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e02:	260f      	movs	r6, #15
 8003e04:	19bb      	adds	r3, r7, r6
 8003e06:	2208      	movs	r2, #8
 8003e08:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e0a:	200e      	movs	r0, #14
 8003e0c:	183b      	adds	r3, r7, r0
 8003e0e:	2208      	movs	r2, #8
 8003e10:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	0e5b      	lsrs	r3, r3, #25
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	240d      	movs	r4, #13
 8003e1e:	193b      	adds	r3, r7, r4
 8003e20:	2107      	movs	r1, #7
 8003e22:	400a      	ands	r2, r1
 8003e24:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	0f5b      	lsrs	r3, r3, #29
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	250c      	movs	r5, #12
 8003e32:	197b      	adds	r3, r7, r5
 8003e34:	2107      	movs	r1, #7
 8003e36:	400a      	ands	r2, r1
 8003e38:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e3a:	183b      	adds	r3, r7, r0
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	197a      	adds	r2, r7, r5
 8003e40:	7812      	ldrb	r2, [r2, #0]
 8003e42:	4914      	ldr	r1, [pc, #80]	; (8003e94 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e44:	5c8a      	ldrb	r2, [r1, r2]
 8003e46:	435a      	muls	r2, r3
 8003e48:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e4a:	197b      	adds	r3, r7, r5
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e50:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e52:	0019      	movs	r1, r3
 8003e54:	f7fc f9e0 	bl	8000218 <__divsi3>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	b299      	uxth	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	226a      	movs	r2, #106	; 0x6a
 8003e60:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e62:	19bb      	adds	r3, r7, r6
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	193a      	adds	r2, r7, r4
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	490a      	ldr	r1, [pc, #40]	; (8003e94 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e6c:	5c8a      	ldrb	r2, [r1, r2]
 8003e6e:	435a      	muls	r2, r3
 8003e70:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e72:	193b      	adds	r3, r7, r4
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e78:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	f7fc f9cc 	bl	8000218 <__divsi3>
 8003e80:	0003      	movs	r3, r0
 8003e82:	b299      	uxth	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2268      	movs	r2, #104	; 0x68
 8003e88:	5299      	strh	r1, [r3, r2]
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b005      	add	sp, #20
 8003e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	08003f84 	.word	0x08003f84
 8003e98:	08003f8c 	.word	0x08003f8c

08003e9c <memset>:
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	1882      	adds	r2, r0, r2
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	7019      	strb	r1, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <__libc_init_array>:
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	2600      	movs	r6, #0
 8003eb0:	4c0c      	ldr	r4, [pc, #48]	; (8003ee4 <__libc_init_array+0x38>)
 8003eb2:	4d0d      	ldr	r5, [pc, #52]	; (8003ee8 <__libc_init_array+0x3c>)
 8003eb4:	1b64      	subs	r4, r4, r5
 8003eb6:	10a4      	asrs	r4, r4, #2
 8003eb8:	42a6      	cmp	r6, r4
 8003eba:	d109      	bne.n	8003ed0 <__libc_init_array+0x24>
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	f000 f819 	bl	8003ef4 <_init>
 8003ec2:	4c0a      	ldr	r4, [pc, #40]	; (8003eec <__libc_init_array+0x40>)
 8003ec4:	4d0a      	ldr	r5, [pc, #40]	; (8003ef0 <__libc_init_array+0x44>)
 8003ec6:	1b64      	subs	r4, r4, r5
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	42a6      	cmp	r6, r4
 8003ecc:	d105      	bne.n	8003eda <__libc_init_array+0x2e>
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	00b3      	lsls	r3, r6, #2
 8003ed2:	58eb      	ldr	r3, [r5, r3]
 8003ed4:	4798      	blx	r3
 8003ed6:	3601      	adds	r6, #1
 8003ed8:	e7ee      	b.n	8003eb8 <__libc_init_array+0xc>
 8003eda:	00b3      	lsls	r3, r6, #2
 8003edc:	58eb      	ldr	r3, [r5, r3]
 8003ede:	4798      	blx	r3
 8003ee0:	3601      	adds	r6, #1
 8003ee2:	e7f2      	b.n	8003eca <__libc_init_array+0x1e>
 8003ee4:	08003f9c 	.word	0x08003f9c
 8003ee8:	08003f9c 	.word	0x08003f9c
 8003eec:	08003fa0 	.word	0x08003fa0
 8003ef0:	08003f9c 	.word	0x08003f9c

08003ef4 <_init>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr

08003f00 <_fini>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f06:	bc08      	pop	{r3}
 8003f08:	469e      	mov	lr, r3
 8003f0a:	4770      	bx	lr
